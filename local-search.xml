<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>蓝桥杯2023年省赛真题分析</title>
    <link href="/2024/03/11/%E8%93%9D%E6%A1%A5%E6%9D%AF2023%E5%B9%B4%E7%9C%81%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2024/03/11/%E8%93%9D%E6%A1%A5%E6%9D%AF2023%E5%B9%B4%E7%9C%81%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="2023年蓝桥杯真题分析"><a href="#2023年蓝桥杯真题分析" class="headerlink" title="2023年蓝桥杯真题分析"></a>2023年蓝桥杯真题分析</h2><h4 id="A幸运数"><a href="#A幸运数" class="headerlink" title="A幸运数"></a>A幸运数</h4><ul><li>模拟题，比较简单，细心一点就可以得分</li></ul><h4 id="B有奖问答"><a href="#B有奖问答" class="headerlink" title="B有奖问答"></a>B有奖问答</h4><ul><li>dfs或者简单dp，也是比较容易的题，要冷静分析，dfs相对来说更清晰一些</li></ul><h4 id="C平方差"><a href="#C平方差" class="headerlink" title="C平方差"></a>C平方差</h4><ul><li>找规律的题目，比较简单，是可以做出来的</li></ul><h4 id="D更小的数"><a href="#D更小的数" class="headerlink" title="D更小的数"></a>D更小的数</h4><ul><li>区间dp，思路不难，但是要对基本dp问题足够熟练</li></ul><h4 id="H异或和之和"><a href="#H异或和之和" class="headerlink" title="H异或和之和"></a>H异或和之和</h4><ul><li>位运算，联系前缀和，没有经验不太好做出来</li></ul><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h4><p>以上的题目是能力之内可以尝试做出来的，或者拿大部分的分，也是学习的重点。所以接下来的学习除了刷真题还要包括<strong>dfs</strong>和<strong>简单经典的dp</strong>还有一些<strong>经典题目</strong>。</p><ul><li>剩余题目思考是否有暴力解决得部分分的方法，知道考察什么知识点</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯真题训练-2023年省赛B组</title>
    <link href="/2024/03/11/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E8%AE%AD%E7%BB%83-2023%E5%B9%B4%E7%9C%81%E8%B5%9BB%E7%BB%84/"/>
    <url>/2024/03/11/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E8%AE%AD%E7%BB%83-2023%E5%B9%B4%E7%9C%81%E8%B5%9BB%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="2023年省赛题目B组"><a href="#2023年省赛题目B组" class="headerlink" title="2023年省赛题目B组"></a>2023年省赛题目B组</h2><h3 id="炼冶金属："><a href="#炼冶金属：" class="headerlink" title="炼冶金属："></a>炼冶金属：</h3><ul><li><p>描述：根据这 <em>N</em> 条冶炼记录，请你推测出转换率 <em>V</em> 的最小值和最大值分别可能是多少，题目保证评测数据不存在无解的情况。</p></li><li><p>思路：根据情况很顺利地推导出逻辑，代码实现即可</p></li><li><p>代码：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-type">int</span> n, A, B, l = -INF, r = INF; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">while</span>(n--)&#123;<br>cin&gt;&gt;A&gt;&gt;B;<br>l = <span class="hljs-built_in">max</span>(l, A/(B + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);<br>r = <span class="hljs-built_in">min</span>(r, A/B);<br>&#125;<br>cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：并不难，主要是INF这里掌握不足，需要记住。</li></ul><h3 id="飞机降落："><a href="#飞机降落：" class="headerlink" title="飞机降落："></a>飞机降落：</h3><ul><li>描述：请你判断 <em>N</em> 架飞机是否可以全部安全降落。</li><li>思路：刚开始尝试贪心但是发现怎么都调不出来所有飞机的顺序，故而采取dfs遍历所有飞机的顺序，时间复杂度为O(N^2),主要注意book每次都要重置为0，不然会影响后面的使用。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> T, n, book[<span class="hljs-number">15</span>]; <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> d;<br><span class="hljs-type">int</span> l;<br>&#125;p[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> step, <span class="hljs-type">int</span> tim)</span></span>&#123;<br><span class="hljs-keyword">if</span>(step &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br><span class="hljs-keyword">if</span>(book[i] == <span class="hljs-number">1</span> ) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(p[i].t + p[i].d &lt; tim) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>book[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(step + <span class="hljs-number">1</span>, <span class="hljs-built_in">max</span>(tim, p[i].t) + p[i].l))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>book[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>cin&gt;&gt;p[i].t&gt;&gt;p[i].d&gt;&gt;p[i].l;<br>&#125;<br><span class="hljs-built_in">memset</span>(book,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(book));<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)) cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl; <br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：for遍历dfs这种形式其实比较常见，注意要恢复现场，多多考虑清楚细节问题。</li></ul><h3 id="接龙数列："><a href="#接龙数列：" class="headerlink" title="接龙数列："></a>接龙数列：</h3><ul><li>描述：给定一个数组，判断最少去掉多少个元素可以使剩余数列为接龙数列</li><li>思路：最少不太好判断，可以转化一下思路，把解决的问题变为在原数组找最长的接龙子序列，那么就是一个线性dp问题了，把每个数字都当作字符串存储更容易使用。dp[c]表示以c为结尾的最长接龙子序列的长度，那么从头开始遍历序列,当前的字符串是s, dp[s[m-1] - 48] &#x3D; max(dp[s[m-1] - 48], dp[s[0] - 48] + 1)。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string s;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">15</span>], ans, n; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>cin&gt;&gt;s;<br><span class="hljs-type">int</span> m = s.<span class="hljs-built_in">length</span>();<br>dp[s[m<span class="hljs-number">-1</span>] - <span class="hljs-number">48</span>] = <span class="hljs-built_in">max</span>(dp[s[m<span class="hljs-number">-1</span>] - <span class="hljs-number">48</span>], dp[s[<span class="hljs-number">0</span>] - <span class="hljs-number">48</span>] + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i++)&#123;<br>ans = <span class="hljs-built_in">max</span>(ans, dp[i]);<br>&#125;<br>cout&lt;&lt;n-ans&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：还是觉得很神奇的线性DP,从头开始遍历竟然就可以逐步解决子序列的求解，太简洁有力了~</li></ul><h3 id="抓娃娃："><a href="#抓娃娃：" class="headerlink" title="抓娃娃："></a>抓娃娃：</h3><ul><li>描述：套圈，给取多个区间，多条线段，线段覆盖区间一半以上算是套中，问每个线段可以套中几个</li><li>思路：套中其实相等于区间的中点在线段之内，那么求出所有的区间中点再前缀和一下，就可以O(1)求出套中的区间个数了。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000050</span>;<br><span class="hljs-type">int</span> n, m, mp[N]; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,l,r; i &lt;= n; i++)&#123;<br>cin&gt;&gt;l&gt;&gt;r;<br>mp[l+r]++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)&#123;<br>mp[i] = mp[i<span class="hljs-number">-1</span>] + mp[i];<br>&#125;<br><span class="hljs-type">int</span> l, r;<br><span class="hljs-keyword">while</span>(m--)&#123;<br>cin&gt;&gt;l&gt;&gt;r;<br>l *= <span class="hljs-number">2</span>;<br>r *= <span class="hljs-number">2</span>;<br>cout&lt;&lt;mp[r] - mp[l<span class="hljs-number">-1</span>]&lt;&lt;endl;  <br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：转化一下思路即可，注意求中点可能出现小数，最好都乘2来避免，这点已经不止一次遇到了。</li></ul><h3 id="子串简写："><a href="#子串简写：" class="headerlink" title="子串简写："></a>子串简写：</h3><ul><li>描述：子串Kubernetes可以简写成 K8s，我们规定长度大于等于 K 的字符串都可以采用这种简写方法。长度小于 K 的字符串不允许使用这种简写。给定一个字符串 S 和两个字符 c1 和 c2。请你计算 S 有多少个以 c1 开头 c2 结尾的子串可以采用这种简写？</li><li>思路：其实就是找对应的c1,c2组数，然后距离要大于等于k,为了降低时间复杂度，对c1的位置进行存储，然后找出最大的符合当前c2位置要求的位置。时间复杂度应当是NlogN。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> k, ans;<br>string s;<br><span class="hljs-type">char</span> c1,c2;<br>vector&lt;<span class="hljs-type">int</span>&gt; pc1;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;k&gt;&gt;s&gt;&gt;c1&gt;&gt;c2;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)&#123;<br><span class="hljs-keyword">if</span>(s[i] == c1)&#123;<br>pc1.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-keyword">if</span>(s[i] == c2)&#123;<br><span class="hljs-keyword">if</span>(i - k + <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span> || pc1.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = pc1.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(l &lt; r)&#123;<br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(pc1[mid] &lt;= i - k + <span class="hljs-number">1</span>) l = mid;<br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(pc1[l] &lt;= i - k + <span class="hljs-number">1</span>)&#123;<br>ans += l + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：通过二分很有效地降低了时间复杂度，而且很简洁明了。关于二分的题目还是要重视，其要求就是存在一个临界点，找出这个临界点。另外，发现题目必须开long long才能过。所以比赛的时候不管三七二十一，最好都写上#define int long long，这样子会避免失去不必要失去的分数。</li></ul><h3 id="01串的熵"><a href="#01串的熵" class="headerlink" title="01串的熵"></a>01串的熵</h3><ul><li>描述：对于一个长度为23333333 的 01 串，如果其信息熵为 11625907.5798，且 0 出现次数比 1 少，那么这个01 串中 0 出现了多少次？</li><li>思路：模拟即可，0的个数0开始遍历，直到结果求出与所给的值一致</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">23333333</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n/<span class="hljs-number">2</span>; i++)&#123;<br><span class="hljs-type">double</span> x = (<span class="hljs-number">-1.0</span>)*(<span class="hljs-number">1.0</span>*i/n)*<span class="hljs-built_in">log2</span>(<span class="hljs-number">1.0</span>*i/n)*i;<br><span class="hljs-type">double</span> y = (<span class="hljs-number">-1.0</span>)*(n-i)/n*<span class="hljs-built_in">log2</span>(<span class="hljs-number">1.0</span>*(n-i)/n)*(n-i);<br><span class="hljs-keyword">if</span>(x + y &gt;= <span class="hljs-number">11625907.5798</span> &amp;&amp; x + y &lt;= <span class="hljs-number">11625907.5799</span>)&#123;<br>cout&lt;&lt;i&lt;&lt;endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：模拟并不困难，关键要注意整数型在进行<strong>除法运算时必须加入1.0这样的浮点数</strong>，否则会精度缺失；另外，最终的<strong>浮点数结果的判定</strong>也要选取x + y &gt;&#x3D; 11625907.5798 &amp;&amp; x + y &lt;&#x3D; 11625907.5799这样的合理范围。</li></ul><h3 id="景区导游："><a href="#景区导游：" class="headerlink" title="景区导游："></a>景区导游：</h3><ul><li>描述：某景区一共有 N 个景点，编号 1 到 N。<br>景点之间共有 N − 1 条双向的摆渡车线路相连，形成一棵树状结构。<br>在景点之间往返只能通过这些摆渡车进行，需要花费一定的时间。<br>小明是这个景区的资深导游，他每天都要按固定顺序带客人游览其中 K 个景点：A1, A2, … , AK。 今天由于时间原因，小明决定跳过其中一个景点，只带游客按顺序游览其中 K − 1 个景点。<br>具体来说，如果小明选择跳过 Ai，那么他会按顺序带游客游览A1, A2, … , Ai−1, Ai+1, … , AK; (1 ≤ i ≤ K)。<br>请你对任意一个 Ai，计算如果跳过这个景点，小明需要花费多少时间在景点之间的摆渡车上？</li><li>思路：通过dfs来求树上两点之间的距离，求出总的路线的sum，再遍历去掉每一个点，sum进行简单的加减。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, k, a[N], sum;<br>vector&lt;PII&gt; e[N];<br>map&lt;PII, <span class="hljs-type">int</span>&gt; st;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> cur, <span class="hljs-type">int</span> last, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> sum)</span></span>&#123;<br><span class="hljs-keyword">if</span>(cur == v)&#123;<br>st[&#123;s, v&#125;] = sum;<br>st[&#123;v, s&#125;] = sum;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; e[cur].<span class="hljs-built_in">size</span>(); i++)&#123;<br><span class="hljs-type">int</span> x = e[cur][i].first;<br><span class="hljs-keyword">if</span>(x == last) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> y = e[cur][i].second;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(s, x, cur, v, sum + y))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>,u,v,t; i &lt; n - <span class="hljs-number">1</span>;i++)&#123;<br>cin&gt;&gt;u&gt;&gt;v&gt;&gt;t;<br>e[u].<span class="hljs-built_in">push_back</span>(&#123;v, t&#125;);<br>e[v].<span class="hljs-built_in">push_back</span>(&#123;u, t&#125;);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) cin&gt;&gt;a[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; i++)&#123;<br><span class="hljs-built_in">dfs</span>(a[i], a[i], <span class="hljs-number">-1</span>, a[i + <span class="hljs-number">1</span>], <span class="hljs-number">0</span>);<br>sum += st[&#123;a[i], a[i + <span class="hljs-number">1</span>]&#125;];<br>&#125;<br><span class="hljs-type">int</span> res;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//dfs(a[i], a[i], -1, a[i + 1], 0);</span><br>res = sum - st[&#123;a[i], a[i + <span class="hljs-number">1</span>]&#125;];<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == k - <span class="hljs-number">1</span>)&#123;<br><span class="hljs-comment">//dfs(a[i-1], a[i-1], -1, a[i], 0);</span><br>res = sum - st[&#123;a[i<span class="hljs-number">-1</span>], a[i]&#125;];<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">dfs</span>(a[i<span class="hljs-number">-1</span>], a[i<span class="hljs-number">-1</span>], <span class="hljs-number">-1</span>, a[i+<span class="hljs-number">1</span>], <span class="hljs-number">0</span>);<br>res = sum - st[&#123;a[i<span class="hljs-number">-1</span>],a[i]&#125;] - st[&#123;a[i], a[i+<span class="hljs-number">1</span>]&#125;] + st[&#123;a[i<span class="hljs-number">-1</span>], a[i+<span class="hljs-number">1</span>]&#125;];<br>&#125;<br>cout&lt;&lt;res&lt;&lt;endl;<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：是一种暴力解法，关键在于树上两点距离的dfs求解，其实这类题目的套路基本已经很熟悉了，还是要勇敢去做，去尝试。这是一道很棒的练手题~</li></ul><h3 id="整数删除："><a href="#整数删除：" class="headerlink" title="整数删除："></a>整数删除：</h3><ul><li>描述：给定一个长度为 N 的整数数列：A1, A2, … , AN。你要重复以下操作 K 次：<br>每次选择数列中最小的整数（如果最小值不止一个，选择最靠前的），将其删除。<br>并把与它相邻的整数加上被删除的数值。<br>输出 K 次操作后的序列</li></ul><h4 id="解法一：暴力模拟"><a href="#解法一：暴力模拟" class="headerlink" title="解法一：暴力模拟"></a>解法一：暴力模拟</h4><ul><li>思路：直接对过程进行模拟，能拿到20%的分数，主要是相邻的数相加这里要考虑存在删除了的数，再加两个循环遍历。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f3f3f3f</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, k, a[N], vis[N];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>cin&gt;&gt;a[i];<br>&#125;<br><span class="hljs-keyword">while</span>(k--)&#123;<br><span class="hljs-type">int</span> minn = INF, pos = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br><span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-number">0</span> &amp;&amp; a[i] &lt; minn)&#123;<br>minn = a[i];<br>pos = i;<br>&#125;<br>&#125;<br>vis[pos] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = pos - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j --)<br>&#123;<br><span class="hljs-keyword">if</span>(!vis[j])<br>&#123;<br>a[j] += minn;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = pos + <span class="hljs-number">1</span>; j &lt; n; j ++)<br>&#123;<br><span class="hljs-keyword">if</span>(!vis[j])<br>&#123;<br>a[j] += minn;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br><span class="hljs-keyword">if</span>(vis[i] == <span class="hljs-number">0</span>)&#123;<br>cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125; <br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：能直接模拟出来快速拿到部分分也是个不错的选择，至少是个保底，当然能正确模拟也是很重要的。</li></ul><h4 id="解法二：链表-优先队列"><a href="#解法二：链表-优先队列" class="headerlink" title="解法二：链表+优先队列"></a>解法二：链表+优先队列</h4><ul><li><p>思路：暴力解法的时间复杂度主要体现在寻找最小值以及找未被删除的相邻节点，可以使用小根堆（优先队列）降低寻找最小值的时间复杂度为O(logN)，再用双向队列（两个数组）维护相邻节点。</p></li><li><p>代码：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, k, a[N], st[N], l[N], r[N]; <br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br>priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>cin&gt;&gt;a[i];<br>q.<span class="hljs-built_in">push</span>(&#123;a[i], i&#125;);<br>st[i] = a[i];<br>l[i] = i - <span class="hljs-number">1</span>;<br>r[i] = i + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(i == n - <span class="hljs-number">1</span>) r[i] = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-keyword">while</span>(k)&#123;<br>pii t = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(t.first != st[t.second])&#123;<br>q.<span class="hljs-built_in">push</span>(&#123;st[t.second], t.second&#125;);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>k--;<br><span class="hljs-type">int</span> pos = t.second;<br><span class="hljs-keyword">if</span>(l[pos] &gt;= <span class="hljs-number">0</span>) st[l[pos]] += t.first;<br><span class="hljs-keyword">if</span>(r[pos] &gt;= <span class="hljs-number">0</span>) st[r[pos]] += t.first;<br><br><span class="hljs-keyword">if</span>(l[pos] &gt;= <span class="hljs-number">0</span>) r[l[pos]] = r[pos];<br><span class="hljs-keyword">if</span>(r[pos] &gt;= <span class="hljs-number">0</span>) l[r[pos]] = l[pos];<br>st[pos] = <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-keyword">if</span>(st[i] != <span class="hljs-number">-1</span>)&#123;<br>cout&lt;&lt;st[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：一些细节问题可以学习，比如<strong>修改值，就是先取，发现值有了更新就加上放回去再重新取</strong>，直到没有改变多了，再k–,这点很巧妙。这是由于小根堆的特点，取最小值比较快。不能直接找出那个要加的值，取出再放回，那么小根堆就失去优势了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯真题训练-2023年省赛A组</title>
    <link href="/2024/03/02/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E8%AE%AD%E7%BB%83/"/>
    <url>/2024/03/02/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E8%AE%AD%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h2 id="2023年省赛题目A组"><a href="#2023年省赛题目A组" class="headerlink" title="2023年省赛题目A组"></a>2023年省赛题目A组</h2><h3 id="A幸运数："><a href="#A幸运数：" class="headerlink" title="A幸运数："></a>A幸运数：</h3><ul><li><p>描述：小蓝认为如果一个数含有偶数个数位，并且前面一半的数位之和等于后面一半的数位之和，则这个数是他的幸运数字。例如 2314 是一个幸运数字，因为它有 44 个数位，并且 2+3&#x3D;1+4。现在请你帮他计算从 1 至 100000000 之间共有多少个不同的幸运数字。</p></li><li><p>思路：10^8刚好是上界，可以直接进行模拟运算，首先计算数的位数，如果是奇数直接跳过，是偶数的话，再计算平分两部分的数值累积，如果相等计入答案。</p></li><li><p>代码：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//int ans = 0;</span><br><span class="hljs-comment">//for(int i = 1; i &lt;= 100000000; i++)&#123;</span><br><span class="hljs-comment">//int cnt = 0;</span><br><span class="hljs-comment">//for(int j = i; j != 0; j/=10)&#123;</span><br><span class="hljs-comment">//cnt++;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if(cnt % 2 == 1) continue;</span><br><span class="hljs-comment">//int now = 0, sum = 0;</span><br><span class="hljs-comment">//for(int j = i;j != 0; j/=10)&#123;</span><br><span class="hljs-comment">//now++;</span><br><span class="hljs-comment">//if(now &lt;= cnt/2) sum += j % 10;</span><br><span class="hljs-comment">//else sum -= j % 10; </span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if(sum == 0) ans++;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;4430091&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><ul><li>总结：第一道题一般都是直接模拟的题目，不用考虑太多时间复杂度，关键在于老老实实清晰模拟过程即可</li></ul><h3 id="B有奖问答"><a href="#B有奖问答" class="headerlink" title="B有奖问答"></a>B有奖问答</h3><ul><li>描述：<ul><li>小蓝正在参与一个现场问答的节目。活动中一共有 30 道题目，每题只有答对和答错两种情况，每答对一题得 10 分，答错一题分数归零。小蓝可以在任意时刻结束答题并获得目前分数对应的奖项，之后不能再答任何题目。最高奖项需要 100 分，所以到达 100 分时小蓝会直接停止答题。已知小蓝最终实际获得了 70 分对应的奖项，请问小蓝所有可能的答题情况有多少种？</li></ul></li></ul><h4 id="解法一：dfs"><a href="#解法一：dfs" class="headerlink" title="解法一：dfs"></a>解法一：dfs</h4><ul><li>思路：采用dfs，不断向下深搜，返回结果条件为到达30题或100分，分支为当前题目做对或做错</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> step, <span class="hljs-type">int</span> score)</span></span>&#123;<br><span class="hljs-keyword">if</span>(score == <span class="hljs-number">70</span>) ans++;<br><span class="hljs-keyword">if</span>(step == <span class="hljs-number">31</span> || score == <span class="hljs-number">100</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">dfs</span>(step + <span class="hljs-number">1</span>, score + <span class="hljs-number">10</span>);<br><span class="hljs-built_in">dfs</span>(step + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>); <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;8335366&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：其实是很明显的dfs,还是不够熟悉，熟能生巧，很棒的一道基础题。</li></ul><h4 id="解法二：dp"><a href="#解法二：dp" class="headerlink" title="解法二：dp"></a>解法二：dp</h4><ul><li>思路：发现相关的前后状态是有联系的，可以采取dp解决。dp(i)(j)表示做了i道题得分为j的方案数，分数先统一&#x2F;10。<ul><li>那么当j！&#x3D;10时，dp(i)(0) +&#x3D; dp(i-1)(j)，相当于此时最终得分为0，那么这i道题最后一道肯定是答错的，前i-1道题任意组合，那么就是dp(i-1)(j)的累加，但是j不能等于10，因为这表示已经满分了，不会再进行答题。</li><li>那么当j！&#x3D;0时，dp(i)(j) &#x3D; dp(i-1)(j-1),表示当前第i道题肯定是答对的，那么前i-1道题得分为j-1的方案数就是之前算出来的dp(i-1)(j-1)</li><li>总的来说，还是当前这第i道题是答对还是答错，答错就是之前的累加，答对就是左上角的方案数。列出对应的二维表会非常清晰</li></ul></li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">35</span>][<span class="hljs-number">15</span>], ans; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">30</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">10</span>; j++)&#123;<br><span class="hljs-keyword">if</span>(j != <span class="hljs-number">10</span>)&#123;<br>dp[i][<span class="hljs-number">0</span>] += dp[i<span class="hljs-number">-1</span>][j];<br>&#125;<br><span class="hljs-keyword">if</span>(j != <span class="hljs-number">0</span>)&#123;<br>dp[i][j] = dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;= <span class="hljs-number">30</span>; i++)&#123;<br>ans+=dp[i][<span class="hljs-number">7</span>];<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：其实可以算是一道背包问题，只有一个特殊点就是分数到100就停止答题了。对于这类较为基础的dp还是有多多联系，是可以拿下的。</li></ul><h3 id="C平方差"><a href="#C平方差" class="headerlink" title="C平方差"></a>C平方差</h3><ul><li>描述：给定 L,R，问 L≤x≤R 中有多少个 x 满足存在整数 y,z，使得 x &#x3D; y2 - z2。</li><li>思路：通过展开平方差即x &#x3D; (y + z)*(y - z),可知x是奇数或是4的倍数，那么直接计算这两个的个数即可</li><li>代码1：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> odd, four,l,r; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;l&gt;&gt;r;<br><span class="hljs-type">int</span> cnt = r - l + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(cnt % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) odd = cnt / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) odd = cnt /<span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span> odd = cnt / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(cnt % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) four = cnt / <span class="hljs-number">4</span>;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">int</span> yu = cnt % <span class="hljs-number">4</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= yu; i++)&#123;<br><span class="hljs-keyword">if</span>((l + i - <span class="hljs-number">1</span>) % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br>four = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>four += cnt / <span class="hljs-number">4</span>;<br>&#125;<br>cout&lt;&lt; odd + four&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代码2：当计算分支比较多时，可以考虑反方向计算，可能会更加简单</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l, r, ans = <span class="hljs-number">0</span>; <span class="hljs-comment">//ans为不满足的条件</span><br>    cin&gt;&gt;l&gt;&gt;r; <br>    <span class="hljs-type">int</span> x = r / <span class="hljs-number">2</span> - (l<span class="hljs-number">-1</span>) / <span class="hljs-number">2</span>; <span class="hljs-comment">//2的倍数</span><br>    <span class="hljs-type">int</span> y = r / <span class="hljs-number">4</span> - (l<span class="hljs-number">-1</span>) / <span class="hljs-number">4</span>; <span class="hljs-comment">//4的倍数</span><br>    ans = x - y; <span class="hljs-comment">//不满足条件</span><br>    <span class="hljs-comment">//cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span><br>    cout&lt;&lt;(r - l + <span class="hljs-number">1</span>) - ans; <span class="hljs-comment">//总数 - 不满足条件</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：当时这道题目应该是做出来了的，只要认真分析题目所给条件并不难，或者通过找规律也可以找到解题线索。</li></ul><h3 id="D更小的数"><a href="#D更小的数" class="headerlink" title="D更小的数"></a>D更小的数</h3><ul><li>描述：小蓝有一个长度均为 n 且仅由数字字符 0 ~ 9 组成的字符串，下标从 0 到 n - 1。<br>你可以将其视作是一个具有 n 位的十进制数字 num。<br>小蓝可以从 num 中选出一段连续的子串并将子串进行反转，最多反转一次。<br>小蓝想要将选出的子串进行反转后再放入原位置处得到的新的数字 numnew 满足条件numnew &lt; num。<br>请你帮他计算下一共有多少种不同的子串选择方案。<br>只要两个子串在 num 中的位置不完全相同我们就视作是不同的方案。<br>注意，我们允许前导零的存在，即数字的最高位可以是 0 ，这是合法的</li></ul><h4 id="解法一：dp"><a href="#解法一：dp" class="headerlink" title="解法一：dp"></a>解法一：dp</h4><ul><li><p>思路：采取区间dp，发现若对任意的l,r，先比较的是s[l]和s[r],如果s[l]&gt;s[r]则方案数加1，等于则看是s[l + 1]和s[r - 1],小于就是0。可以看到是存在<strong>子问题重叠</strong>的，子问题的最优解能代表整个问题的最优解。另外，这种二维dp的遍历方式一般都是先遍历长度再遍历左节点。</p></li><li><p>代码：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">5050</span>][<span class="hljs-number">5050</span>],ans; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s;<br>cin&gt;&gt;s;<br><span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len ++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l + len - <span class="hljs-number">1</span> &lt; n; l++)&#123;<br><span class="hljs-type">int</span> r = l + len - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(s[l] &gt; s[r]) dp[l][r] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[l] == s[r]) dp[l][r] = dp[l + <span class="hljs-number">1</span>][r<span class="hljs-number">-1</span>];<br>ans += dp[l][r];<br>&#125;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：并不是很负责的区间dp,需要仔细分析通用情况，要多多熟练这种题型呀~</li></ul><h4 id="解法二：常规"><a href="#解法二：常规" class="headerlink" title="解法二：常规"></a>解法二：常规</h4><ul><li>思路：双重循环遍历，相等的情况直接算不行，但是当产生一个可行时，由里向外检查相同的情况，也算是可行方案，时间复杂也是O(N^2)。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string s;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;s;<br><span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n;j++)&#123;<br><span class="hljs-keyword">if</span>(s[i] &lt;= s[j]) <span class="hljs-keyword">continue</span>;<br>ans++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; i - k &gt;=<span class="hljs-number">0</span> &amp;&amp; j + k &lt;=n; k++)&#123;<br><span class="hljs-keyword">if</span>(s[i - k] == s[j + k]) ans++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>; <span class="hljs-comment">//剪枝</span><br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：也是很巧妙的做法，尤其是由里向外扩展检查这一步，时间复杂度应该也是O(N^2)，空间复杂度相对较低，为O(1)。</li></ul><h3 id="H异或和之和"><a href="#H异或和之和" class="headerlink" title="H异或和之和"></a>H异或和之和</h3><ul><li>描述：给定一个数组 A[i]，分别求其每个子段的异或和，并求出它们的和。或者说，对于每组满足 1≤<em>L</em>≤<em>R</em>≤<em>n</em> 的 L*,<em>R，求出数组中第 L 至第 R 个元素的异或和。然后输出每组L</em>,*R得到的结果加起来的值。</li><li>思路：连续异或具有<strong>前缀和</strong>的性质，即S[l,r]表示l到r的异或和等于S[r]^S[l-1],另外异或是针对位来说的，可以把每个数字都<strong>按位拆解</strong>。按照类似前缀和的方式求出每个S[i],那么它们要么是0，要么是1，进行任意组合的方案数就是<strong>0的个数乘以1的个数，再乘回当前位的权重</strong>累加就是最终结果了。注意计算0，1个数要从0开始。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-type">int</span> n, a[<span class="hljs-number">100050</span>], cnt[<span class="hljs-number">2</span>], sum, s[<span class="hljs-number">100050</span>];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) cin&gt;&gt;a[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">20</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br><span class="hljs-keyword">if</span>((a[j]&gt;&gt;i) &amp; <span class="hljs-number">1</span>) s[j] = s[j - <span class="hljs-number">1</span>] ^ <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> s[j] = s[j - <span class="hljs-number">1</span>];<br>&#125;<br>cnt[<span class="hljs-number">0</span>] = cnt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= n; k++)&#123; <span class="hljs-comment">//参考前缀和，s[0]也要包括进来，因为s[i]和s[j]的异或实际表示的是a[i+1]到a[j]的异或和</span><br>cnt[s[k]]++; <br>&#125;<br>sum += (<span class="hljs-number">1ll</span> &lt;&lt; i) * cnt[<span class="hljs-number">0</span>] * cnt[<span class="hljs-number">1</span>];<br>&#125;<br>cout&lt;&lt;sum&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：针对位运算的一道题，异或性质和前缀和的性质竟然是类似的，很有意思，一个全新的视角解决了这道题。</li></ul><h3 id="F买瓜"><a href="#F买瓜" class="headerlink" title="F买瓜"></a>F买瓜</h3><ul><li><p>描述：小蓝正在一个瓜摊上买瓜。瓜摊上共有 n 个瓜，每个瓜的重量为Ai。小蓝刀功了得，他可以把任何瓜劈成完全等重的两份，不过每个瓜只能劈一刀。小蓝希望买到的瓜的重量的和恰好为 m。</p><p>请问小蓝至少要劈多少个瓜才能买到重量恰好为 m 的瓜。如果无论怎样小蓝都无法得到总重恰好为 m 的瓜，请输出 −1。</p></li></ul><h4 id="解法一：暴力dfs-剪枝"><a href="#解法一：暴力dfs-剪枝" class="headerlink" title="解法一：暴力dfs+剪枝"></a>解法一：暴力dfs+剪枝</h4><ul><li>思路：每种瓜都有三种可能，不买，劈了买，不劈买，遍历三种可能然后不断往下递归，直到越界或者找到正确答案。由于0.5不好计算，可以把所有重量均乘以2。</li><li>代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, a[<span class="hljs-number">35</span>], ans = <span class="hljs-number">35</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> m; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> step, <span class="hljs-type">int</span> status, <span class="hljs-type">int</span> cnt, <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum)</span></span>&#123;<br><span class="hljs-keyword">if</span>(sum &gt; m) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span>(step &gt; n)&#123;<br><span class="hljs-keyword">if</span>(sum == m) ans = <span class="hljs-built_in">min</span>(ans, cnt);<br><span class="hljs-keyword">return</span>;<br>&#125; <br><span class="hljs-keyword">if</span>(status == <span class="hljs-number">0</span>) sum += <span class="hljs-number">2</span> * a[step];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(status == <span class="hljs-number">1</span>) sum += a[step], cnt++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) <span class="hljs-built_in">dfs</span>(step + <span class="hljs-number">1</span>, i, cnt, sum);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br>m = m * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>cin&gt;&gt;a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, i, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：暴力的本质就是递归，其实就是先遍历当前瓜的所有可能，然后再往下递归下一个瓜的所有可能，对于这种暴力模拟做法还是要掌握的。</li></ul><h3 id="E颜色平衡树"><a href="#E颜色平衡树" class="headerlink" title="E颜色平衡树"></a>E颜色平衡树</h3><ul><li><p>描述：给定一棵树，结点由 1至 n 编号，其中结点 1 是树根。树的每个点有一个颜色 Ci。</p><p>如果一棵树中存在的每种颜色的结点个数都相同，则我们称它是一棵颜色平衡树。</p><p>求出这棵树中有多少个子树是颜色平衡树。</p></li><li><p>思路：dfs深度递归每一棵树，先cnt(u)(x) &#x3D; p,表示根节点为u的子树颜色为x的有p个，然后sum(u)(cnt(u)(k)) &#x3D; q表示以u为根节点的子树下颜色个数为cnt(u)(k)的有q组，如果最终sum(u)的大小为1，表示所有颜色的个数都是相同的。cnt和sum都是三维结构，采用unordered_map存储。</p></li><li><p>代码：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, c[N], ans;<br>vector&lt;<span class="hljs-type">int</span>&gt; g[N];<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cnt[N], sum[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>cnt[u][c[u]] = <span class="hljs-number">1</span>;<br>sum[u][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v : g[u])&#123;<br><span class="hljs-built_in">dfs</span>(v);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;it : cnt[v])&#123;<br><span class="hljs-type">int</span> x = it.first, y = it.second;<br><span class="hljs-keyword">if</span>(cnt[u].<span class="hljs-built_in">count</span>(x))&#123;<br>sum[u][cnt[u][x]]--;<br><span class="hljs-keyword">if</span>(sum[u][cnt[u][x]] == <span class="hljs-number">0</span>)&#123;<br>sum[u].<span class="hljs-built_in">erase</span>(cnt[u][x]);<br>&#125;<br>&#125;<br>sum[u][cnt[u][x]+=y]++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(sum[u].<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) ans++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; i++)&#123;<br>cin &gt;&gt; c[i] &gt;&gt; x;<br>g[x].<span class="hljs-built_in">emplace_back</span>(i);<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>cout&lt;&lt;ans; <br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：很厉害的写法，尤其是sum的增加使得原先需要遍历所有的cnt判断颜色个数是否一致可以O(1)的时间复杂度判断出来，而对sum的递推是直接内嵌在dfs里的，太厉害了。还有unordered_map对于三维数组的应用也非常熟练，太厉害了！而且这个dfs也没有一般的终结条件，即叶节点，相当于隐式的方式了。很棒的一道题，考场上要是能模拟出这种暴力真的就太棒了！~</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣链表部分题目总结---基本完结~</title>
    <link href="/2024/02/02/%E5%8A%9B%E6%89%A3%E9%93%BE%E8%A1%A8%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2024/02/02/%E5%8A%9B%E6%89%A3%E9%93%BE%E8%A1%A8%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>链表部分之前刷力扣也做过一些，基本做不出来，都是看题解，希望这次训练可以在链表的题目上有些进步叭；）</p><h3 id="1-相交链表"><a href="#1-相交链表" class="headerlink" title="1.相交链表"></a>1.相交链表</h3><ul><li>描述：给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</li></ul><h4 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：两个链表相交，采用双指针的方法，开始分别指向两个链表头，同步向后走，一旦走完一个链表就换另一个链表头继续走，那么两个指针会在相交位置刚好重逢（如果相交的话），否则就返回null。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        <span class="hljs-keyword">if</span>(headA == <span class="hljs-literal">null</span> || headB == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pA</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pB</span> <span class="hljs-operator">=</span> headB;<br>        <span class="hljs-keyword">while</span>(pA != pB)&#123;<br>            pA = pA == <span class="hljs-literal">null</span>? headB : pA.next;<br>            pB = pB == <span class="hljs-literal">null</span>? headA : pB.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pA;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>非常巧妙的双指针，简洁有力的解决问题。简写的条件判断自己写的话用的比较少，可以学习一下。</li></ul><h4 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h4><ul><li>思路：用哈希表存下一个链表的所有节点，再遍历另一个链表去找相交点，由于哈希表里存的是地址，所以是可行的。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        Set&lt;ListNode&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-keyword">while</span>(tmp != <span class="hljs-literal">null</span>)&#123;<br>            visited.add(tmp);<br>            tmp = tmp.next;<br>        &#125;<br>        tmp = headB;<br>        <span class="hljs-keyword">while</span>(tmp != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(visited.contains(tmp))&#123;<br>                <span class="hljs-keyword">return</span> tmp;<br>            &#125;<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：思路并不难，就是对Set这些数据结构要足够熟悉才行。</li></ul><h3 id="2-反转链表"><a href="#2-反转链表" class="headerlink" title="2.反转链表"></a>2.反转链表</h3><ul><li>描述：给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</li></ul><h4 id="解法一：-1"><a href="#解法一：-1" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：采用迭代的方式，设置3个变量prev,cur,next,从链表头开始逐步反转每一条next指针</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> cur.next;<br>            cur.next = prev;<br>            prev = cur;<br>            cur = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：最直白的思路，但是还是要对链表的基础足够熟悉才行。</li></ul><h4 id="解法二：-1"><a href="#解法二：-1" class="headerlink" title="解法二："></a>解法二：</h4><ul><li>思路：采取递归，一直往后，那么假设后半段链表已经反转过来，形成类似O-&gt;O-&gt;<strong>O-&gt;O</strong>&lt;-O&lt;-O,那么中间这个的前一个head的next.next修改为自己，再head.next&#x3D;null，即可变为O-&gt;O-&gt;<strong>O&lt;-O</strong>&lt;-O&lt;-O,以此类推。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> reverseList(head.next);<br>        head.next.next = head;<br>        head.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：递归更加抽象，也更加有意思，对于递归的处理有了更深的理解，一般都是倒推，后面的已经完成，怎么处理当前的状况。</li></ul><h3 id="3-回文链表："><a href="#3-回文链表：" class="headerlink" title="3.回文链表："></a>3.回文链表：</h3><ul><li>描述：给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><h4 id="解法一：-2"><a href="#解法一：-2" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：用一个数组取出所有节点的val,然后双指针判断是否回文</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        List&lt;Integer&gt; vals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>            vals.add(cur.val);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = vals.size() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>            <span class="hljs-keyword">if</span>(!vals.get(l).equals(vals.get(r)))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            l++;<br>            r--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：最直接的思路，熟练使用List数据结构，包括add,get,equals方法。</li></ul><h4 id="解法二：-2"><a href="#解法二：-2" class="headerlink" title="解法二："></a>解法二：</h4><ul><li>思路：利用递归会变相的反向遍历链表这个特点，设置一个从head开始的全局变量进行比较验证。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> ListNode frontPointer;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">recursivelyCheck</span><span class="hljs-params">(ListNode cur)</span>&#123;<br>        <span class="hljs-keyword">if</span>(cur == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!recursivelyCheck(cur.next))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cur.val == frontPointer.val)&#123;<br>            frontPointer = frontPointer.next;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        frontPointer = head;<br>        <span class="hljs-keyword">return</span> recursivelyCheck(head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：实用性不强，因为在许多语言中，堆栈帧的开销很大（如 Python），并且最大的运行时堆栈深度为 1000（可以增加，但是有可能导致底层解释程序内存出错）。为每个节点创建堆栈帧极大的限制了算法能够处理的最大链表大小。但是思路很有意思。</li></ul><h4 id="解法三："><a href="#解法三：" class="headerlink" title="解法三："></a>解法三：</h4><ul><li>思路：为了实现O(1)的空间复杂度，先利用快慢指针找到链表的中间位置，返回后半部分链表，比较两个链表，再恢复链表。</li><li>代码:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">endOfFisrtHalf</span><span class="hljs-params">(ListNode head)</span>&#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(fast.next != <span class="hljs-literal">null</span> &amp;&amp; fast.next.next != <span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//考虑只有一个节点或两个节点的特殊情况，最终slow必须是属于前半部分的最后一个节点</span><br>            fast = fast.next.next;<br>            slow = slow.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> cur.next;<br>            cur.next = prev;<br>            prev = cur;<br>            cur = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">firstHalfEnd</span> <span class="hljs-operator">=</span> endOfFisrtHalf(head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">secondHalfStart</span> <span class="hljs-operator">=</span> reverseList(firstHalfEnd.next);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> secondHalfStart;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span>(res &amp;&amp; p2 != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(p1.val != p2.val)&#123;<br>                res = <span class="hljs-literal">false</span>;<br>            &#125;<br>            p1 = p1.next;<br>            p2 = p2.next;<br>        &#125;<br>        firstHalfEnd.next = reverseList(secondHalfStart);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：和之前的反转链表连起来了，很美妙的做法，以及通过快慢指针找中间节点的方法，感觉也很常用。</li></ul><h3 id="4-环形链表"><a href="#4-环形链表" class="headerlink" title="4.环形链表"></a>4.环形链表</h3><ul><li><p>描述：给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p></li></ul><h4 id="解法一：-3"><a href="#解法一：-3" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：利用快慢指针，慢指针一次走一步，快指针一次走两步，如果有环，那么快指针一定比慢指针先进入，继而落后于慢指针，由于<strong>此时快指针与慢指针的距离每次减少1</strong>，<strong>环可以看作是无限的直线，所以一定会相遇</strong>。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span>(slow != fast)&#123;<br>            <span class="hljs-keyword">if</span>(fast == <span class="hljs-literal">null</span> || fast.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：神奇的快慢指针，与环结合很适合用来做相遇，很棒的思路~</li></ul><h3 id="5-环形链表"><a href="#5-环形链表" class="headerlink" title="5.环形链表||"></a>5.环形链表||</h3><ul><li>描述：给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></li></ul><h4 id="解法一：-4"><a href="#解法一：-4" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：回归最简单直接的方法，Hash记录所有访问过的点，一旦再次访问到即可直接返回。</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        Set&lt;ListNode&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(pos != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(visited.contains(pos))&#123;<br>                <span class="hljs-keyword">return</span> pos;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                visited.add(pos);<br>                pos = pos.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解法二：-3"><a href="#解法二：-3" class="headerlink" title="解法二："></a>解法二：</h4><img src="00.png" alt="思路" width="500px"><ul><li>思路：还是基于快慢指针，并且通过数学计算发现相遇后，从头节点到入环点的距离等于相遇点到入环点的距离。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head, fast = head;<br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-literal">null</span>)&#123;<br>            slow = slow.next;<br>            <span class="hljs-keyword">if</span>(fast.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span>(slow == fast)&#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">ptr</span> <span class="hljs-operator">=</span> head;<br>                <span class="hljs-keyword">while</span>(ptr != slow)&#123;<br>                    ptr = ptr.next;<br>                    slow = slow.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> ptr;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：和直接判断环的题目还是不太一样，首先就是快慢指针的起点都是head,然后导致while判断也发生变化，需要视情况而定。</li></ul><h3 id="6-合并两个有序链表"><a href="#6-合并两个有序链表" class="headerlink" title="6.合并两个有序链表"></a>6.合并两个有序链表</h3><ul><li>描述：将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</li></ul><h4 id="解法一：-5"><a href="#解法一：-5" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：采用递归的思想，先判断两个头部的值，较小的保留，剩余的两个链表继续合并，直到其中一个链表为空。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> &#123;<br>        <span class="hljs-keyword">if</span>(list1 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> list2;<br>        <span class="hljs-keyword">if</span>(list2 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> list1;<br>        <span class="hljs-keyword">if</span>(list1.val &lt; list2.val)&#123;<br>            list1.next = mergeTwoLists(list1.next, list2);<br>            <span class="hljs-keyword">return</span> list1;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            list2.next = mergeTwoLists(list1, list2.next);<br>            <span class="hljs-keyword">return</span> list2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：两种情况再分别递归，实现两个链表中的较小值的逐一合并，很巧妙。</li></ul><h3 id="7-两数相加"><a href="#7-两数相加" class="headerlink" title="7.两数相加"></a>7.两数相加</h3><ul><li>描述：给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</li></ul><h4 id="解法一：-6"><a href="#解法一：-6" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：创建一个新链，逐个去取两个链表上的数相加，直到两个链表均为空，若有一个为空，直接赋值为0，最后注意还要判断一下进位。</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, tail = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-literal">null</span> || l2!= <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> l1 != <span class="hljs-literal">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> l2 != <span class="hljs-literal">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> n1 + n2 + carry;<br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>                head = tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>                tail = tail.next;<br>            &#125;<br>            carry = sum /<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span>(l1 != <span class="hljs-literal">null</span>)&#123;<br>                l1 = l1.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(l2 != <span class="hljs-literal">null</span>)&#123;<br>                l2 = l2.next;<br>            &#125;   <br>        &#125;<br>        <span class="hljs-keyword">if</span>(carry &gt; <span class="hljs-number">0</span>)&#123;<br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>            &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：思路很清晰，主要是写代码要多多注意细节问题~</li></ul><h3 id="8-排序链表"><a href="#8-排序链表" class="headerlink" title="8.排序链表"></a>8.排序链表</h3><ul><li>描述：给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</li></ul><h4 id="解法一：-7"><a href="#解法一：-7" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：<strong>自顶向下</strong>，采用归并递归的方法，不断细分链表，直到不能再细分然后进行合并两个有序链表。时间复杂度为O(NlogN),空间复杂度为O(NlogN)，因为用到了栈的递归空间。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">sortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">return</span> sortList(head, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">sortList</span><span class="hljs-params">(ListNode head, ListNode tail)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head; <span class="hljs-comment">//当前链表没有节点或只有一个节点是返回条件</span><br>        <span class="hljs-keyword">if</span>(head.next == tail)&#123;<br>            head.next = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head, fast = head;<br>        <span class="hljs-keyword">while</span>(fast != tail)&#123;<br>            slow = slow.next;<br>            fast = fast.next;<br>            <span class="hljs-keyword">if</span>(fast != tail)&#123;<br>                fast = fast.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> slow;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> sortList(head, mid);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> sortList(mid, tail);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">sorted</span> <span class="hljs-operator">=</span> merge(list1, list2);<br>        <span class="hljs-keyword">return</span> sorted;<br>    &#125;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">merge</span><span class="hljs-params">(ListNode head1, ListNode head2)</span>&#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp1</span> <span class="hljs-operator">=</span> head1, tmp2 = head2;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> dummyHead;<br>        <span class="hljs-keyword">while</span>(tmp1 != <span class="hljs-literal">null</span> &amp;&amp; tmp2 != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(tmp1.val &lt;= tmp2.val)&#123;<br>                temp.next = tmp1;<br>                tmp1 = tmp1.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                temp.next = tmp2;<br>                tmp2 = tmp2.next;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(tmp1 != <span class="hljs-literal">null</span>)&#123;<br>            temp.next = tmp1;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp2 != <span class="hljs-literal">null</span>)&#123;<br>            temp.next = tmp2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：关键点就是归并实现最终的排序，一些细节问题需要注意，比如需要断链然后再重新合并(tail这个节点很关键)，merge方法还要更加熟练。</li></ul><h4 id="解法二：-4"><a href="#解法二：-4" class="headerlink" title="解法二："></a>解法二：</h4><ul><li>思路：<strong>自底向上</strong>，先把链表分为subLen为1的子链表，两两合并，subLen再乘2重复操作，直到大于等于链表长度。涉及到两个子链表的拆分(cur)然后再合并（prev）,细节要很清楚才行。时间复杂度为O(NlogN),<strong>空间复杂度为O(1)</strong>.</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">sortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        dummyHead.next = head;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(node != <span class="hljs-literal">null</span>)&#123;<br>            len++;<br>            node = node.next;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">subLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; subLen &lt; len; subLen &lt;&lt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> dummyHead;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummyHead.next;<br>            <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">head_1</span> <span class="hljs-operator">=</span> cur;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; subLen &amp;&amp; cur != <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span>; i++)&#123;<br>                    cur = cur.next;<br>                &#125;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">head_2</span> <span class="hljs-operator">=</span> cur.next;<br>                cur.next = <span class="hljs-literal">null</span>;<br>                cur = head_2;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; subLen &amp;&amp; cur != <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span>; i++)&#123;<br>                    cur = cur.next;<br>                &#125;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">if</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>                    next = cur.next;<br>                    cur.next = <span class="hljs-literal">null</span>;<br>                &#125;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">merged</span> <span class="hljs-operator">=</span> merge(head_1, head_2);<br>                prev.next = merged;<br>                <span class="hljs-keyword">while</span>(prev.next != <span class="hljs-literal">null</span>)&#123;<br>                    prev = prev.next;<br>                &#125;<br>                cur = next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead.next;<br>    &#125;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">merge</span><span class="hljs-params">(ListNode head1, ListNode head2)</span>&#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp1</span> <span class="hljs-operator">=</span> head1, tmp2 = head2;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> dummyHead;<br>        <span class="hljs-keyword">while</span>(tmp1 != <span class="hljs-literal">null</span> &amp;&amp; tmp2 != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(tmp1.val &lt;= tmp2.val)&#123;<br>                temp.next = tmp1;<br>                tmp1 = tmp1.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                temp.next = tmp2;<br>                tmp2 = tmp2.next;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(tmp1 != <span class="hljs-literal">null</span>)&#123;<br>            temp.next = tmp1;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp2 != <span class="hljs-literal">null</span>)&#123;<br>            temp.next = tmp2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：这是一道很棒的题目，深入熟悉了两种做法，特别是两种优秀的底层思路，归并和自底向上。自底向上的思路说起来简单，但是操作起来常常有很多细节需要反复推敲，熟能生巧叭~</li></ul><h3 id="9-两两交换链表中的节点"><a href="#9-两两交换链表中的节点" class="headerlink" title="9.两两交换链表中的节点"></a>9.两两交换链表中的节点</h3><ul><li>描述：给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）</li></ul><h4 id="解法一：-8"><a href="#解法一：-8" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：本质就是交换链表中的两个节点，然后采取递归的方式不断往后走。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> head.next;<br>        head.next = newHead.next;<br>        newHead.next = head;<br>        head.next = swapPairs(head.next);<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：自己写出来的一道题目，很棒，刚开始swapPairs里写成了head.next.next，然后根据输出debug解决了问题，很不错~</li></ul><h3 id="10-随机链表的复制"><a href="#10-随机链表的复制" class="headerlink" title="10.随机链表的复制"></a>10.随机链表的复制</h3><ul><li>描述：给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。构造这个链表的 <strong><a href="https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin">深拷贝</a><strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。</strong>复制链表中的指针都不应指向原链表中的节点</strong> 。</li></ul><h4 id="解法一：-9"><a href="#解法一：-9" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：由于random指针可能指向后面的未创建的节点，所以采用<strong>回溯+哈希表</strong>，直接往下递归，把对应的节点返回来即可。时间和空间复杂度都是O(N)。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Node, Node&gt; cacheNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">copyRandomList</span><span class="hljs-params">(Node head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(!cacheNode.containsKey(head))&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(head.val);<br>            cacheNode.put(head, newNode);<br>            newNode.next = copyRandomList(head.next);<br>            newNode.random = copyRandomList(head.random);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cacheNode.get(head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：原来<strong>递归还可以用于回溯</strong>，其实好像递归的本质就有点回溯的意味，那么这道题刚好应用了这一本质，再结合哈希避免了节点的重复复制。</li></ul><h4 id="解法二：-5"><a href="#解法二：-5" class="headerlink" title="解法二："></a>解法二：</h4><ul><li>思路：采取<strong>迭代</strong>的方法，先把每个节点拆分为两个一样的节点，前面一个节点作为原节点，后面一个节点作为复制节点，遍历把后面节点的random指针指向对应的复制节点，最后再<strong>拆分链表</strong>。时间复杂度为O（N）,空间复杂度为O（1）。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">copyRandomList</span><span class="hljs-params">(Node head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head; node != <span class="hljs-literal">null</span>; node = node.next.next)&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(node.val);<br>            newNode.next = node.next;<br>            node.next = newNode;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head; node != <span class="hljs-literal">null</span>; node = node.next.next)&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> node.next;<br>            newNode.random = (node.random != <span class="hljs-literal">null</span>) ? node.random.next : <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head; node != <span class="hljs-literal">null</span>; node = node.next)&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> node.next;<br>            node.next = node.next.next;<br>            newNode.next = (newNode.next != <span class="hljs-literal">null</span>) ? newNode.next.next : <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：由于链表的特性采取复制节点的想法，那么next指针的复制就很自然，random指针的复制也很方便，很巧妙的方法~</li></ul><h4 id="解法三：-1"><a href="#解法三：-1" class="headerlink" title="解法三："></a>解法三：</h4><ul><li>思路：直接先忽略random指针复制出链表的结构，然后再针对random指针进行复制即可。其中利用<strong>map</strong>键值对来维护节点和它的复制节点的关系。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">copyRandomList</span><span class="hljs-params">(Node head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        Map&lt;Node, Node&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>            map.put(cur, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(cur.val));<br>            cur = cur.next;<br>        &#125;<br>        cur = head;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>            map.get(cur).next = map.get(cur.next);<br>            map.get(cur).random = map.get(cur.random);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.get(head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：超级简单易懂，巧妙地采取了Map来维护，非常巧妙！</li></ul><h3 id="11-LRU缓存"><a href="#11-LRU缓存" class="headerlink" title="11.LRU缓存"></a>11.LRU缓存</h3><ul><li><p>描述：请你设计并实现一个满足 <a href="https://baike.baidu.com/item/LRU">LRU (最近最少使用) 缓存</a> 约束的数据结构。</p><p>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以 <strong>正整数</strong> 作为容量 <code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字 <code>key</code> 已经存在，则变更其数据值 <code>value</code> ；如果不存在，则向缓存中插入该组 <code>key-value</code> 。如果插入操作导致关键字数量超过 <code>capacity</code> ，则应该 <strong>逐出</strong> 最久未使用的关键字。</li></ul><p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行。</p></li></ul><h4 id="解法一：-10"><a href="#解法一：-10" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：采用map来实现key和node的对应，采用双向链表来维护节点间的结构，保证了删除尾节点后在O(1)时间内找到尾结点的前一个作为新的尾结点。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DLinkedNode</span>&#123;<br>        <span class="hljs-type">int</span> key;<br>        <span class="hljs-type">int</span> value;<br>        DLinkedNode prev;<br>        DLinkedNode next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DLinkedNode</span><span class="hljs-params">()</span>&#123;&#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DLinkedNode</span><span class="hljs-params">(<span class="hljs-type">int</span> _key, <span class="hljs-type">int</span> _value)</span>&#123;<br>            key = _key;<br>            value = _value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Map&lt;Integer, DLinkedNode&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-keyword">private</span> DLinkedNode head, tail;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>();<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>();<br>        head.next = tail;<br>        tail.prev = head;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> cache.get(key);<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        moveToHead(node);<br>        <span class="hljs-keyword">return</span> node.value;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> cache.get(key);<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>(key, value);<br>            cache.put(key, newNode);<br>            addToHead(newNode);<br>            size++;<br>            <span class="hljs-keyword">if</span>(size &gt; capacity)&#123;<br>                <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> removeTail();<br>                cache.remove(tail.key);<br>                size--;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            node.value = value;<br>            moveToHead(node);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveToHead</span><span class="hljs-params">(DLinkedNode node)</span>&#123;<br>        removeNode(node);<br>        addToHead(node);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNode</span><span class="hljs-params">(DLinkedNode node)</span>&#123;<br>        node.prev.next = node.next;<br>        node.next.prev = node.prev;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToHead</span><span class="hljs-params">(DLinkedNode node)</span>&#123;<br>        node.next = head.next;<br>        node.prev = head;<br>        head.next.prev = node;<br>        head.next = node;<br>    &#125;<br>    <span class="hljs-keyword">private</span> DLinkedNode <span class="hljs-title function_">removeTail</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> tail.prev;<br>        removeNode(res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：对于链表来说很好的一道综合题，考察了各种链表操作。然后双向链表以及head,tail节点的使用也很精妙，值得反复去写的一道题。</li></ul><h3 id="12-K个一组翻转链表"><a href="#12-K个一组翻转链表" class="headerlink" title="12.K个一组翻转链表"></a>12.K个一组翻转链表</h3><ul><li><p>描述: 给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换</p></li></ul><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一:"></a>解法一:</h4><ul><li>思路: 对每k个节点进行翻转链表,由于是翻转部分链表,那么链表的<strong>两侧的相邻的节点</strong>都要注意,会跟之前的直接翻转链表有点区别，cur节点在后面就相当于已经翻转好的节点的集合，具体指向的是最后一个节点。</li><li>代码:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>, head), prev = dummy;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> prev;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>                last = last.next;<br>                <span class="hljs-keyword">if</span>(last == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> dummy.next;<br>            &#125;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> prev.next, next;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; i++)&#123;<br>                next = cur.next;<br>                cur.next = next.next;<br>                next.next = prev.next;<br>                prev.next = next;<br>            &#125;<br>            prev = cur;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结: 翻转部分的链表与直接翻转整个链表还是有一些区别的,但是写起来起承转合的很优美哇~</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑马点评-短信登录</title>
    <link href="/2024/02/01/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95/"/>
    <url>/2024/02/01/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="基于Redis实现短信登录"><a href="#基于Redis实现短信登录" class="headerlink" title="基于Redis实现短信登录"></a>基于Redis实现短信登录</h2><h3 id="0-前言："><a href="#0-前言：" class="headerlink" title="0.前言："></a>0.前言：</h3><h4 id="短信验证登录过程中需要共享session："><a href="#短信验证登录过程中需要共享session：" class="headerlink" title="短信验证登录过程中需要共享session："></a>短信验证登录过程中需要<strong>共享session</strong>：</h4><ul><li>1.发送短信验证码：<strong>保存验证码到session</strong></li><li>2.短信验证码登录注册：根据手机号查询用户，如果是新用户要先进行注册，再<strong>保存用户到session</strong></li><li>3.验证登录状态：cookie中有<strong>sessionID</strong>，判断用户是否存在，进行拦截或者保存到ThreadLocal，再放行</li></ul><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><ul><li>每个tomcat中都有一份属于自己的session，多台Tomcat不共享session存储空间，切换时数据丢失</li></ul><h4 id="替代要求："><a href="#替代要求：" class="headerlink" title="替代要求："></a>替代要求：</h4><ul><li>数据共享</li><li>内存存储，数据处理速度快</li><li>key,value结构</li></ul><p><strong>故选择Redis进行解决</strong></p><h3 id="1-采用Redis的业务流程："><a href="#1-采用Redis的业务流程：" class="headerlink" title="1.采用Redis的业务流程："></a>1.采用Redis的业务流程：</h3><img src="10.png" alt="发送验证码和登陆注册" width="800px"><img src="11.png" alt="登陆注册和校验登陆状态" width="800px"><h4 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h4><h5 id="1-key和数据结构的选择："><a href="#1-key和数据结构的选择：" class="headerlink" title="1.key和数据结构的选择："></a>1.key和数据结构的选择：</h5><ul><li>保存验证码：用手机号作为key<ul><li>手机号是唯一的，并且恰好与验证码绑定</li><li>采用String类型存储code</li></ul></li><li>保存用户对象：用随机生成的token作为key<ul><li>token需要传递给前端，并在每次请求中被携带，用手机号会有泄露风险</li><li>采用Hash结构存储用户对象，相比String采取Json格式，Hash结构每个字段相互独立，可以单独CRUD,并且内存占用更少</li></ul></li></ul><h5 id="2-选择合适的有效期："><a href="#2-选择合适的有效期：" class="headerlink" title="2.选择合适的有效期："></a>2.选择合适的有效期：</h5><ul><li>token要设置一定的有效期，用户长期不操作，就失去登录状态</li></ul><h5 id="3-选择合适的存储粒度DTO"><a href="#3-选择合适的存储粒度DTO" class="headerlink" title="3.选择合适的存储粒度DTO"></a>3.选择合适的存储粒度DTO</h5><ul><li>用户对象本身的信息是很丰富的，还包括手机号，密码等隐私信息，在登陆阶段不需要保存和传递这么多信息，可以新建一个UserDTO类来代替</li></ul><h3 id="2-技术要点："><a href="#2-技术要点：" class="headerlink" title="2.技术要点："></a>2.技术要点：</h3><h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal:"></a>ThreadLocal:</h4><ul><li>在threadLocal中，他的put方法和他的get方法， 都是先从获得当前用户的线程，然后从线程中取出线程的成员变量map，只要线程不一样，map就不一样，所以可以通过这种方式来做到<strong>线程隔离</strong></li><li>所以可以实现每个用户的保存和相关信息的读取</li></ul><h4 id="User转Hash存储："><a href="#User转Hash存储：" class="headerlink" title="User转Hash存储："></a>User转Hash存储：</h4><ul><li>userDTO转Map再存储到Redis过程中，由于使用的是StringRedisTemplate要求所有的字段都是String类型，但是id是Long类型的，所以需要再进行一步手动转化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(),<br>            CopyOptions.create()<br>                    .setIgnoreNullValue(<span class="hljs-literal">true</span>)<br>                    .setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));<br></code></pre></td></tr></table></figure><h4 id="刷新token有效期优化："><a href="#刷新token有效期优化：" class="headerlink" title="刷新token有效期优化："></a>刷新token有效期优化：</h4><p>在只有一个拦截器的情况下，拦截器里的过程：</p><ul><li>获取token信息</li><li>查询Redis的用户，不存在就拦截，存在就继续</li><li>保存到ThreadLocal中</li><li>刷新token有效期</li><li>放行</li></ul><p>那么如果用户进行了不需要登录验证的操作，比如查看首页，那么拦截器不会拦截，token就得不到刷新，是有问题的。</p><p><strong>解决：增加一个拦截一切路径的拦截器</strong></p><p>第一个拦截器：（所有路径）</p><ul><li>获取token信息</li><li>查询Redis的用户</li><li>保存到ThreadLocal中</li><li>刷新token有效期</li><li>放行</li></ul><p>第二个拦截器：（需要登陆的路径）</p><ul><li>不存在就拦截，存在就继续</li></ul><p>完美实现token的及时刷新</p>]]></content>
    
    
    <categories>
      
      <category>黑马点评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>短信登陆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis课程思维导图总结</title>
    <link href="/2024/02/01/Redis%E8%AF%BE%E7%A8%8B/"/>
    <url>/2024/02/01/Redis%E8%AF%BE%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Redis基础篇"><a href="#Redis基础篇" class="headerlink" title="Redis基础篇"></a>Redis基础篇</h3><img src="01.png" alt="基础篇知识总结" width="1500px">]]></content>
    
    
    <categories>
      
      <category>黑马点评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Winter Vacation</title>
    <link href="/2024/01/31/Vacation/"/>
    <url>/2024/01/31/Vacation/</url>
    
    <content type="html"><![CDATA[<h2 id="My-Winter-Vacation"><a href="#My-Winter-Vacation" class="headerlink" title="My Winter Vacation"></a>My Winter Vacation</h2><h3 id="0-前言："><a href="#0-前言：" class="headerlink" title="0.前言："></a>0.前言：</h3><p>​回想之前的寒暑假，大都一开始兴致满满，最终以虚度时光，收获满满的沧桑为结尾。这次以新的方式开始，以目的制定目标，为自己做主，大概会不一样吧~虽然寒假已然过去了1&#x2F;3,anyway,that’s not a big deal!</p><hr><h3 id="1-小小的回顾："><a href="#1-小小的回顾：" class="headerlink" title="1.小小的回顾："></a>1.小小的回顾：</h3><p>​过去的两周主要把精力放在<strong>算法题</strong>和<strong>Redis黑马点评学习</strong>上，以及一些博客的更新，总的来说，很不错，基本算是要事第一了，并且也享受这个过程。</p><p>​但是从以终为始的角度来说，两个的目的性不够明确，最终要达到什么效果更是没有想过，间接导致了中间3天的断更。这一经验证明了以终为始的明智。</p><h3 id="2-一些罗列："><a href="#2-一些罗列：" class="headerlink" title="2.一些罗列："></a>2.一些罗列：</h3><ul><li>算法题训练</li><li>黑马点评项目</li><li>计网课程</li><li>新技术了解输出，主要是RedTech</li><li>每天更新博客</li><li>看书：《宝贵的人生建议》，《秘密》，《原子习惯》</li><li>英语每日学习一丢丢</li><li>冥想</li><li>了解一下产品经理</li><li>调查一些感兴趣的外企大厂的jd</li></ul><h3 id="3-目标选取："><a href="#3-目标选取：" class="headerlink" title="3.目标选取："></a>3.目标选取：</h3><h4 id="算法题训练："><a href="#算法题训练：" class="headerlink" title="算法题训练："></a>算法题训练：</h4><p><strong>WHY:</strong></p><ul><li>总的来说，这是一件很具有未来性的事情</li><li>写算法题很开心，尤其是体悟到其中的精妙，I quite enjoy it!</li><li>很多大厂注重算法的考察，相当于是一张入场券</li><li>4月参加蓝桥杯比赛，估计是最后一次了，虽然目前是Java,但底层是相通的</li></ul><p><strong>WHAT:</strong></p><ul><li>具体：每天可以写<strong>两道</strong>以上并有<strong>题解</strong>输出，做专题训练<ul><li><input checked="" disabled="" type="checkbox"> 二叉树（二叉树的中序遍历✔，二叉树的最大深度✔，二叉树的序列化和反序列化✔）</li><li><input disabled="" type="checkbox"> 链表</li><li><input disabled="" type="checkbox"> 图论</li></ul></li><li>可衡量：依照博客记录可以回溯</li><li>可接受：两道不算多，基本上一个小时可以完成，就当作是写智力题，时间会过得很快，之前的坚持了一段时间，是可以接受的</li><li>结果导向：题解的输出就是结果，希望可以完成4-5个专题</li><li>时限：到寒假结束</li></ul><p><strong>HOW:</strong></p><ul><li>可能遇到的问题？<ul><li>白天事情太多，晚上又没有足够的时间去写算法题了</li></ul></li><li>如何解决？<ul><li>写之前做过的题目，需要的时间就会大大减少，并且也算是得到一定的锻炼</li><li>尽量在白天就完成掉，多多利用一些闲暇时间</li></ul></li></ul><p>​</p><h4 id="黑马点评项目："><a href="#黑马点评项目：" class="headerlink" title="黑马点评项目："></a>黑马点评项目：</h4><p><strong>WHY:</strong></p><ul><li>很接近企业级应用的一个项目，教程也很不错</li><li>更深一步接触后端开发领域</li><li>值得深入研究，写在简历上</li></ul><p><strong>WHAT:</strong></p><ul><li>具体：完成实战篇的内容，并作文章输出</li><li>可衡量：依照博客记录进行回溯，一共有7个topic</li><li>可接受：按照两天一个topic，其实是ok的</li><li>结果导向：做出这个项目</li><li>时限：到寒假结束</li></ul><p><strong>HOW:</strong></p><ul><li>可能遇到的问题？<ul><li>2天来不及完成一个专题，进而产生放弃心理</li></ul></li><li>如何解决？<ul><li>完成比完美更重要，只要每天花时间去学习就好啦，不要被所谓的量化牵着鼻子走</li></ul></li><li>遇到的问题：停了几天后就不去开启了</li></ul><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结:"></a>4.总结:</h3><ul><li>主要还是围绕<strong>算法题</strong>和<strong>黑马点评</strong>进行，其余的不做强制要求，只是一些选择。或者从长远来说，这些其余的选项更加重要，同样值得去做</li><li>这份规划并不是固定的，可以隔一段时间时间就更新一下状况</li></ul>]]></content>
    
    
    <categories>
      
      <category>人文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自我成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工程师的自我迭代-RedTech</title>
    <link href="/2024/01/23/RedTech/"/>
    <url>/2024/01/23/RedTech/</url>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>这篇文章是看了小红书有关“工程师自我迭代”的技术分享的一个总结复盘，It’s quite mind-opening。所以拖了好几天还是想小小总结反思一下，方便以后回看。</p><hr><h3 id="0-两种成功：合作成功和赋能成功"><a href="#0-两种成功：合作成功和赋能成功" class="headerlink" title="0.两种成功：合作成功和赋能成功"></a>0.两种成功：合作成功和赋能成功</h3><ul><li>说明：<ul><li>在职场上的工程师大概可以分为两阶段，一个是<strong>技术类工程师</strong>，一个是<strong>管理层工程师</strong>。这两个分别对应着两种不同的成功，即<strong>合作成功</strong>与<strong>赋能成功</strong>。</li></ul></li></ul><h3 id="1-合作成功：小T字型人才"><a href="#1-合作成功：小T字型人才" class="headerlink" title="1.合作成功：小T字型人才"></a>1.合作成功：小T字型人才</h3><ul><li>T的意思是分别对应”一“的深和”|“的广，深广须兼顾</li></ul><h4 id="1-1深度（自己的技术栈）："><a href="#1-1深度（自己的技术栈）：" class="headerlink" title="1.1深度（自己的技术栈）："></a>1.1深度（自己的技术栈）：</h4><p>说明：即对于自己的方向要足够深入，方方面面都了解</p><ul><li><strong>系统性</strong>——&gt;<em><u>我该如何搭建我的知识系统呢？</u></em></li><li><strong>深刻理解</strong>——&gt;<strong>有项目经历，有成果</strong></li></ul><p><em><u>系统性的搭建一方面可以基于学校的专业课程，一方面也要自己去探索</u></em></p><h4 id="1-2广度（相关的技术和业务）："><a href="#1-2广度（相关的技术和业务）：" class="headerlink" title="1.2广度（相关的技术和业务）："></a>1.2广度（相关的技术和业务）：</h4><p>说明：不能只专于自己的方向，对于相关的领域也要有所了解。比如演讲人是音视频方向的专家，那么他对于云原生，数据库，电商行业，直播互动也要有所涉足。</p><ul><li><strong>关键概念</strong></li><li><strong>语言体系</strong></li><li><strong>交互界面</strong></li></ul><p><em><u>以上三点总结来说就是<strong>知彼解己</strong>，即知道相关领域的人所说的关键概念，也能让对方知道自己在表达什么，形成一个良好的交互界面。</u></em></p><h3 id="2-赋能成功：大T字型人才"><a href="#2-赋能成功：大T字型人才" class="headerlink" title="2.赋能成功：大T字型人才"></a>2.赋能成功：大T字型人才</h3><ul><li>赋能成功，更多是指为他人赋能，为团队赋能</li></ul><h4 id="1-1深度："><a href="#1-1深度：" class="headerlink" title="1.1深度："></a>1.1深度：</h4><ul><li>技术的一个泛化，相当于小T字型人才的一个总和。此时会需要接触其他团队，比如说产品、运营，对于他们来说，技术是一个黑盒子的概念。</li></ul><h4 id="1-2广度："><a href="#1-2广度：" class="headerlink" title="1.2广度："></a>1.2广度：</h4><ul><li><p>术：表达、写作、逻辑 &#x3D;&#x3D;&#x3D;&gt;说和写总归要擅长一个</p></li><li><p>道：理性、<strong>逻辑</strong>、修养、<strong>企图心</strong>、自我控制力</p><ul><li>怎么修？<ul><li><strong>主动积极</strong>（问题驱动，关注结果），达到<strong>以终为始</strong></li></ul></li></ul></li><li><p>信念：自我改变即迭代——&gt;<strong>不断更新</strong></p><ul><li><p>心态年轻：拥抱新事物</p></li><li><p>心智成熟：不做巨婴</p></li><li><p>巨婴：</p><ul><li>自我——&gt;知彼解己，双赢思维，统合综效</li><li>只看眼前——&gt;要事第一，以终为始</li><li>依赖性强——&gt;主动积极</li><li>不再成长——&gt;不断更新</li></ul></li></ul></li></ul><h3 id="3-管理者的“三会一懂”"><a href="#3-管理者的“三会一懂”" class="headerlink" title="3.管理者的“三会一懂”"></a>3.管理者的“三会一懂”</h3><ul><li>会定目标：<ul><li>五要素：具体、可衡量、可接受、结果导向、时限</li></ul></li><li>会开会<ul><li>例会、主题会，就不展开了</li></ul></li><li>会复盘<ul><li>小事及时复盘</li><li>大事阶段复盘</li><li>完事全面复盘</li></ul></li><li>懂战略<ul><li>战略即取舍</li><li><strong><u>战略不是关于未来做什么，而是“现在做什么的未来性”</u></strong> （整个分享我最爱的一句话！）</li></ul></li></ul><p>总结：</p><ul><li>虽然说是管理者的三会一懂，但我觉得很多道理是相通的，比如说制定目标的标准，还有我之前的复盘也多少受此影响，以及最后的战略，常思常新。</li></ul><h3 id="4-WWH视角"><a href="#4-WWH视角" class="headerlink" title="4.WWH视角"></a>4.WWH视角</h3><img src="11.png" alt="WWH" width="650px"><ul><li>WHY:<ul><li>为什么要做？</li><li>不做行不行？</li><li>以后再做行不行？</li></ul></li><li>WHAT:<ul><li>技术特点或关键点？</li><li>类似的技术，区别？</li><li>优缺点？成熟度？</li><li>收益与代价？</li></ul></li><li>HOW:<ul><li>如何避坑？</li><li>如何实验？</li><li>如何迭代？</li><li>如何工程化？</li></ul></li><li>总结：一个工程师的成长就是从只关注HOW上提升到逐渐涉及WHAT和WHY上的深入。当然，我觉得思考很多事情都可以尝试去套用这个，逻辑会很清晰。</li></ul><h3 id="5-总结与思考"><a href="#5-总结与思考" class="headerlink" title="5.总结与思考"></a>5.总结与思考</h3><ul><li>这里面提到了不少《高效能人士的七个习惯》的概念，给我一种世界尽头是这本书的感觉，之前没看进去。但结合实际来讲，其中的许多概念确实很先进，值得学习。</li><li>我的收获<ul><li>对于工程师的职业发展有了一个更大的视角，之前可能就是集中于技术的提升，现在发现很多软实力也非常值得关注，或者说是一种通用能力</li><li>如何制定规划，设定目标，底层来说要<strong>要事第一、以终为始</strong>，上层来说可以以五要素为基准拓展，打算拿这套来规划一下寒假，（但还没开始呢）</li><li>注重复盘的作用，及时复盘是个不错的习惯，一是理清思路，二是发挥事物的最大价值</li><li><strong>战略不是关于未来做什么，而是“现在做什么的未来性”</strong>，一句顶一万句的感觉</li><li>关于技术的系统性搭建，目前没什么思路，需要更多的学习吧，到一定程度俯览整个知识结构</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>人文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自我成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL的JOIN连接多表查询</title>
    <link href="/2024/01/22/SQL%E7%9A%84JOIN%E8%BF%9E%E6%8E%A5%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/01/22/SQL%E7%9A%84JOIN%E8%BF%9E%E6%8E%A5%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>数据库上课时这一部分没有听进去，前几天面试又问到了SQL，现在才发现答得简直是乱七八糟，那就趁现在好好整理一下吧，感谢面试官的包容，I really appreciate that！</p><hr><h3 id="0-所有的JOINS概览"><a href="#0-所有的JOINS概览" class="headerlink" title="0.所有的JOINS概览"></a>0.所有的JOINS概览</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span><br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span><br><span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> EXCLUDING <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> EXCLUDING <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br><span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> EXCLUDING <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br><span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span><br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">用于查询的两张表信息</span><br><span class="hljs-comment">TABLE_A</span><br>  <span class="hljs-comment">PK Value</span><br><span class="hljs-literal">----</span> <span class="hljs-literal">----------</span><br>   <span class="hljs-comment">1 FOX</span><br>   <span class="hljs-comment">2 COP</span><br>   <span class="hljs-comment">3 TAXI</span><br>   <span class="hljs-comment">6 WASHINGTON</span><br>   <span class="hljs-comment">7 DELL</span><br>   <span class="hljs-comment">5 ARIZONA</span><br>   <span class="hljs-comment">4 LINCOLN</span><br>  <span class="hljs-comment">10 LUCENT</span><br><br><span class="hljs-comment">TABLE_B</span><br>  <span class="hljs-comment">PK Value</span><br><span class="hljs-literal">----</span> <span class="hljs-literal">----------</span><br>   <span class="hljs-comment">1 TROT</span><br>   <span class="hljs-comment">2 CAR</span><br>   <span class="hljs-comment">3 CAB</span><br>   <span class="hljs-comment">6 MONUMENT</span><br>   <span class="hljs-comment">7 PC</span><br>   <span class="hljs-comment">8 MICROSOFT</span><br>   <span class="hljs-comment">9 APPLE</span><br>  <span class="hljs-comment">11 SCOTCH</span><br></code></pre></td></tr></table></figure><h3 id="1-Inner-JOIN内连接"><a href="#1-Inner-JOIN内连接" class="headerlink" title="1.Inner JOIN内连接"></a>1.Inner JOIN内连接</h3><img src="10.png" alt="内连接" width="300px"><p>说明：相当于取两张表的交集，JOIN没有特别说明时默认就是内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.PK <span class="hljs-keyword">AS</span> A_PK, A.Value <span class="hljs-keyword">AS</span> A_Value,<br>       B.Value <span class="hljs-keyword">AS</span> B_Value, B.PK <span class="hljs-keyword">AS</span> B_PK<br><span class="hljs-keyword">FROM</span> Table_A A<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Table_B B<br><span class="hljs-keyword">ON</span> A.PK <span class="hljs-operator">=</span> B.PK<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">A_PK A_Value    B_Value    B_PK<br><span class="hljs-comment">---- ---------- ---------- ----</span><br>   <span class="hljs-number">1</span> FOX        TROT          <span class="hljs-number">1</span><br>   <span class="hljs-number">2</span> COP        CAR           <span class="hljs-number">2</span><br>   <span class="hljs-number">3</span> TAXI       CAB           <span class="hljs-number">3</span><br>   <span class="hljs-number">6</span> WASHINGTON MONUMENT      <span class="hljs-number">6</span><br>   <span class="hljs-number">7</span> DELL       PC            <span class="hljs-number">7</span><br><br>(<span class="hljs-number">5</span> <span class="hljs-type">row</span>(s) affected)<br></code></pre></td></tr></table></figure><h3 id="2-Left-JOIN左连接"><a href="#2-Left-JOIN左连接" class="headerlink" title="2.Left JOIN左连接"></a>2.Left JOIN左连接</h3><img src="11.png" alt="左连接" width="300px"><p>说明：相当于取两张表的交集加上左表，即所有的左表数据都会被显示出来，不管有没有匹配的右表，没有的话右表部分就显示NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.PK <span class="hljs-keyword">AS</span> A_PK, A.Value <span class="hljs-keyword">AS</span> A_Value,<br>B.Value <span class="hljs-keyword">AS</span> B_Value, B.PK <span class="hljs-keyword">AS</span> B_PK<br><span class="hljs-keyword">FROM</span> Table_A A<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> Table_B B<br><span class="hljs-keyword">ON</span> A.PK <span class="hljs-operator">=</span> B.PK<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">A_PK A_Value    B_Value    B_PK<br><span class="hljs-comment">---- ---------- ---------- ----</span><br>   <span class="hljs-number">1</span> FOX        TROT          <span class="hljs-number">1</span><br>   <span class="hljs-number">2</span> COP        CAR           <span class="hljs-number">2</span><br>   <span class="hljs-number">3</span> TAXI       CAB           <span class="hljs-number">3</span><br>   <span class="hljs-number">4</span> LINCOLN    <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>   <span class="hljs-number">5</span> ARIZONA    <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>   <span class="hljs-number">6</span> WASHINGTON MONUMENT      <span class="hljs-number">6</span><br>   <span class="hljs-number">7</span> DELL       PC            <span class="hljs-number">7</span><br>  <span class="hljs-number">10</span> LUCENT     <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><h3 id="3-Right-JOIN右连接"><a href="#3-Right-JOIN右连接" class="headerlink" title="3.Right JOIN右连接"></a>3.Right JOIN右连接</h3><img src="12.png" alt="右连接" width="300px"><p>说明：相当于取两张表的交集加上右表，即所有的右表数据都会被显示出来，不管有没有匹配的左表，没有的话左表的部分就显示NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.PK <span class="hljs-keyword">AS</span> A_PK, A.Value <span class="hljs-keyword">AS</span> A_Value,<br>B.Value <span class="hljs-keyword">AS</span> B_Value, B.PK <span class="hljs-keyword">AS</span> B_PK<br><span class="hljs-keyword">FROM</span> Table_A A<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> Table_B B<br><span class="hljs-keyword">ON</span> A.PK <span class="hljs-operator">=</span> B.PK<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">A_PK A_Value    B_Value    B_PK<br><span class="hljs-comment">---- ---------- ---------- ----</span><br>   <span class="hljs-number">1</span> FOX        TROT          <span class="hljs-number">1</span><br>   <span class="hljs-number">2</span> COP        CAR           <span class="hljs-number">2</span><br>   <span class="hljs-number">3</span> TAXI       CAB           <span class="hljs-number">3</span><br>   <span class="hljs-number">6</span> WASHINGTON MONUMENT      <span class="hljs-number">6</span><br>   <span class="hljs-number">7</span> DELL       PC            <span class="hljs-number">7</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       MICROSOFT     <span class="hljs-number">8</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       APPLE         <span class="hljs-number">9</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       SCOTCH       <span class="hljs-number">11</span><br><br>(<span class="hljs-number">8</span> <span class="hljs-type">row</span>(s) affected)<br><br></code></pre></td></tr></table></figure><h3 id="4-OUTER-JOIN外连接"><a href="#4-OUTER-JOIN外连接" class="headerlink" title="4.OUTER JOIN外连接"></a>4.OUTER JOIN外连接</h3><img src="13.png" alt="外连接" width="300px"><p>说明：会返回两张表的所有的记录，相当于两张表的并集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.PK <span class="hljs-keyword">AS</span> A_PK, A.Value <span class="hljs-keyword">AS</span> A_Value,<br>B.Value <span class="hljs-keyword">AS</span> B_Value, B.PK <span class="hljs-keyword">AS</span> B_PK<br><span class="hljs-keyword">FROM</span> Table_A A<br><span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> Table_B B<br><span class="hljs-keyword">ON</span> A.PK <span class="hljs-operator">=</span> B.PK<br></code></pre></td></tr></table></figure><p>结果：sql server 里先显示内连接，再是右连接，最后是左连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">A_PK A_Value    B_Value    B_PK<br><span class="hljs-comment">---- ---------- ---------- ----</span><br>   <span class="hljs-number">1</span> FOX        TROT          <span class="hljs-number">1</span><br>   <span class="hljs-number">2</span> COP        CAR           <span class="hljs-number">2</span><br>   <span class="hljs-number">3</span> TAXI       CAB           <span class="hljs-number">3</span><br>   <span class="hljs-number">6</span> WASHINGTON MONUMENT      <span class="hljs-number">6</span><br>   <span class="hljs-number">7</span> DELL       PC            <span class="hljs-number">7</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       MICROSOFT     <span class="hljs-number">8</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       APPLE         <span class="hljs-number">9</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       SCOTCH       <span class="hljs-number">11</span><br>   <span class="hljs-number">5</span> ARIZONA    <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>   <span class="hljs-number">4</span> LINCOLN    <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>  <span class="hljs-number">10</span> LUCENT     <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br><br>(<span class="hljs-number">11</span> <span class="hljs-type">row</span>(s) affected)<br><br></code></pre></td></tr></table></figure><h3 id="5-Left-Excluding-JOIN左表唯一连接"><a href="#5-Left-Excluding-JOIN左表唯一连接" class="headerlink" title="5.Left Excluding JOIN左表唯一连接"></a>5.Left Excluding JOIN左表唯一连接</h3><img src="14.png" alt="左表唯一连接" width="300px"><p>说明：会返回左表中与右表不能匹配的所有记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.PK <span class="hljs-keyword">AS</span> A_PK, A.Value <span class="hljs-keyword">AS</span> A_Value,<br>B.Value <span class="hljs-keyword">AS</span> B_Value, B.PK <span class="hljs-keyword">AS</span> B_PK<br><span class="hljs-keyword">FROM</span> Table_A A<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> Table_B B<br><span class="hljs-keyword">ON</span> A.PK <span class="hljs-operator">=</span> B.PK<br><span class="hljs-keyword">WHERE</span> B.PK <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">A_PK A_Value    B_Value    B_PK<br><span class="hljs-comment">---- ---------- ---------- ----</span><br>   <span class="hljs-number">4</span> LINCOLN    <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>   <span class="hljs-number">5</span> ARIZONA    <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>  <span class="hljs-number">10</span> LUCENT     <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>(<span class="hljs-number">3</span> <span class="hljs-type">row</span>(s) affected)<br><br></code></pre></td></tr></table></figure><h3 id="6-Right-Excluding-JOIN右表唯一连接"><a href="#6-Right-Excluding-JOIN右表唯一连接" class="headerlink" title="6.Right Excluding JOIN右表唯一连接"></a>6.Right Excluding JOIN右表唯一连接</h3><img src="15.png" alt="右表唯一连接" width="300px"><p>说明：会返回右表中与左表不能匹配的所有记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.PK <span class="hljs-keyword">AS</span> A_PK, A.Value <span class="hljs-keyword">AS</span> A_Value,<br>B.Value <span class="hljs-keyword">AS</span> B_Value, B.PK <span class="hljs-keyword">AS</span> B_PK<br><span class="hljs-keyword">FROM</span> Table_A A<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> Table_B B<br><span class="hljs-keyword">ON</span> A.PK <span class="hljs-operator">=</span> B.PK<br><span class="hljs-keyword">WHERE</span> A.PK <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">A_PK A_Value    B_Value    B_PK<br><span class="hljs-comment">---- ---------- ---------- ----</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       MICROSOFT     <span class="hljs-number">8</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       APPLE         <span class="hljs-number">9</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       SCOTCH       <span class="hljs-number">11</span><br><br>(<span class="hljs-number">3</span> <span class="hljs-type">row</span>(s) affected)<br><br></code></pre></td></tr></table></figure><h3 id="7-Outer-Excluding-JOIN非交集连接"><a href="#7-Outer-Excluding-JOIN非交集连接" class="headerlink" title="7.Outer Excluding JOIN非交集连接"></a>7.Outer Excluding JOIN非交集连接</h3><img src="16.png" alt="非交集连接" width="300px"><p>说明：会返回左表和右表里没有相互关联的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.PK <span class="hljs-keyword">AS</span> A_PK, A.Value <span class="hljs-keyword">AS</span> A_Value,<br>B.Value <span class="hljs-keyword">AS</span> B_Value, B.PK <span class="hljs-keyword">AS</span> B_PK<br><span class="hljs-keyword">FROM</span> Table_A A<br><span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> Table_B B<br><span class="hljs-keyword">ON</span> A.PK <span class="hljs-operator">=</span> B.PK<br><span class="hljs-keyword">WHERE</span> A.PK <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">OR</span> B.PK <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">A_PK A_Value    B_Value    B_PK<br><span class="hljs-comment">---- ---------- ---------- ----</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       MICROSOFT     <span class="hljs-number">8</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       APPLE         <span class="hljs-number">9</span><br><span class="hljs-keyword">NULL</span> <span class="hljs-keyword">NULL</span>       SCOTCH       <span class="hljs-number">11</span><br>   <span class="hljs-number">5</span> ARIZONA    <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>   <span class="hljs-number">4</span> LINCOLN    <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br>  <span class="hljs-number">10</span> LUCENT     <span class="hljs-keyword">NULL</span>       <span class="hljs-keyword">NULL</span><br><br>(<span class="hljs-number">6</span> <span class="hljs-type">row</span>(s) affected)<br><br></code></pre></td></tr></table></figure><h3 id="8-Cross-JOIN交叉连接"><a href="#8-Cross-JOIN交叉连接" class="headerlink" title="8.Cross JOIN交叉连接"></a>8.Cross JOIN交叉连接</h3><img src="17.png" alt="交叉连接" width="300px"><p>说明：一张表中的数据依次取出分别与另一张表中的每条数据挨个组合，最后记录数量为两张表记录数的乘积，就是笛卡尔积。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">例如：<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> major<br></code></pre></td></tr></table></figure><h3 id="9-有关Where的多表连接查询"><a href="#9-有关Where的多表连接查询" class="headerlink" title="9.有关Where的多表连接查询"></a>9.有关Where的多表连接查询</h3><h4 id="9-1where和inner-join的区别："><a href="#9-1where和inner-join的区别：" class="headerlink" title="9.1where和inner join的区别："></a>9.1where和inner join的区别：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ID, b.Name, b.Date <span class="hljs-keyword">FROM</span> Customers a, Sales b <span class="hljs-keyword">WHERE</span> a.ID <span class="hljs-operator">=</span> b.ID;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ID, b.Name, b.Date <span class="hljs-keyword">FROM</span> Customers a <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Sales b <span class="hljs-keyword">ON</span> a.ID <span class="hljs-operator">=</span> b.ID;<br></code></pre></td></tr></table></figure><p>两者的结果是一样的。</p><p>但是<strong>where</strong>是实际上是创建了两张表的<strong>笛卡尔积</strong>，然后再做筛选过滤。如果两张表各有1000条记录，就会先产生1000000个结果，然后通过正确的 ID过滤出符合1000条记录。</p><p>而使用<strong>inner join</strong> 这样数据库就只产生符合的1000条目标结果，相比之下，查询效率更高。</p><h4 id="9-2on和where的区别："><a href="#9-2on和where的区别：" class="headerlink" title="9.2on和where的区别："></a>9.2on和where的区别：</h4><ul><li>对于left join:</li><li>on条件是<strong>生成临时表时的条件</strong>，无论on的条件是否为真，左表的数据都会返回，只是右表数据这是都会变成null，这是Left Join的特性(Right Join同)</li><li>where是在<strong>临时表创建完后</strong>根据条件进行筛选</li><li>即：<strong>先on 建立临时表再where进行筛选</strong></li></ul><h3 id="最后的全家福"><a href="#最后的全家福" class="headerlink" title="最后的全家福"></a>最后的全家福</h3><img src="20.png" alt="所有连接" width="300px"><hr><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>参考文章1：<a href="https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins">https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins</a></p><p>参考文章2：<a href="https://zhuanlan.zhihu.com/p/68136613">https://zhuanlan.zhihu.com/p/68136613</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-demo-HelloWorld</title>
    <link href="/2024/01/21/SpringBoot-demo-HelloWorld/"/>
    <url>/2024/01/21/SpringBoot-demo-HelloWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-boot-demo-helloworld"><a href="#spring-boot-demo-helloworld" class="headerlink" title="spring-boot-demo-helloworld"></a>spring-boot-demo-helloworld</h1><h3 id="1-总体说明"><a href="#1-总体说明" class="headerlink" title="1.总体说明"></a>1.总体说明</h3><ul><li>一个基本的SpringBoot应用程序，其中包含一个Restful控制器，用于响应http的get请求。</li></ul><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootDemoHelloworldApplication</span> &#123;  <span class="hljs-comment">//主类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-comment">//程序入口并启动SpringBoot应用程序</span><br>        SpringApplication.run(SpringBootDemoHelloworldApplication.class, args);<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Hello，World</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> who 参数，非必须</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Hello, $&#123;who&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span> <span class="hljs-comment">//使用HTTP的get请求，将“/hello”路径映射到sayHello方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(required = false, name = &quot;who&quot;)</span> String who)</span> &#123;<span class="hljs-comment">//接受一个可选的查询参数名为who,绑定到参数who上</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(who)) &#123;<br>            who = <span class="hljs-string">&quot;World&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> StrUtil.format(<span class="hljs-string">&quot;Hello, &#123;&#125;!&quot;</span>, who); <span class="hljs-comment">//将占位符&#123;&#125;用&quot;who&quot;参数的值替换</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-详细解释"><a href="#3-详细解释" class="headerlink" title="3.详细解释"></a>3.详细解释</h3><ul><li><strong>@SpringBootApplication</strong>：标记SpringBoot应用程序的<strong>主类</strong>，是一个<strong>配置类</strong>，并启用了Spring<u>上下文</u>的自动配置</li><li><strong>@RestController</strong>：定义Spring MVC应用程序中的<strong>控制器类</strong>，表示类中方法的返回值是**<u>HTTP响应体</u>**（而不是依赖于视图技术）。</li></ul><h3 id="4-一些深入"><a href="#4-一些深入" class="headerlink" title="4.一些深入"></a>4.一些深入</h3><h4 id="4-1-什么是Sping上下文？"><a href="#4-1-什么是Sping上下文？" class="headerlink" title="4.1 什么是Sping上下文？"></a>4.1 什么是Sping上下文？</h4><p>​<em>Spring 上下文（Spring Context）是 Spring 框架中的一个核心概念，它是一个<strong>对象容器</strong>，负责管理和维护应用程序中的所有<strong>对象（bean）</strong>。Spring 上下文充当了容器，负责<strong>加载、配置和组织</strong>应用程序中的各个组件，以及<strong>管理</strong>它们之间的<strong>依赖关系</strong>。</em></p><ul><li>我的理解：感觉还是有点抽象，先留个印象吧</li></ul><h4 id="4-2-什么是视图技术？"><a href="#4-2-什么是视图技术？" class="headerlink" title="4.2 什么是视图技术？"></a>4.2 什么是视图技术？</h4><p>常见的视图技术包括：</p><ol><li><strong>JSP（JavaServer Pages）：</strong> JSP 是一种基于 Java 的服务器端模板技术，允许将 Java 代码嵌入到 HTML 页面中。JSP 文件通常包含 HTML 标记和嵌入的 Java 代码，用于动态生成页面内容。</li><li><strong>Thymeleaf：</strong> Thymeleaf 是一种现代的服务器端模板引擎，支持自然的模板语法，而且可以直接在浏览器中预览模板。它特别适用于构建 HTML5 页面。</li></ol><p><code>@Controller</code> 注解通常与视图技术结合使用，将处理结果封装到模型中，然后选择适当的<u>视图来呈现这些模型数据</u>。</p><p> <code>@RestController</code> 注解表示控制器类的方法的返回值<u><strong>直接作为 HTTP 响应体</strong></u>，不再依赖于视图技术。</p><h4 id="4-3遇到的问题和解决"><a href="#4-3遇到的问题和解决" class="headerlink" title="4.3遇到的问题和解决"></a>4.3遇到的问题和解决</h4><ul><li>问题：自己照着编写了一个MyHelloworldApplication,但是运行失败</li><li>原因分析：两个主类基本一致，产生了<strong>映射冲突</strong>，导致两个不同的 <code>@RestController</code> 类中的相同路径 <code>/hello</code> 被映射到了相同的方法上</li><li>解决：更改其中一个路径为&#x2F;myHello,解决问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringBoot-Demo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣二叉树部分题目题解---基本完成啦~</title>
    <link href="/2024/01/20/%E5%8A%9B%E6%89%A3%E4%BA%8C%E5%8F%89%E6%A0%91%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/20/%E5%8A%9B%E6%89%A3%E4%BA%8C%E5%8F%89%E6%A0%91%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>​对于树一直是有一种惧怕心理的，题目做的不够多，有思路都不知道怎么实现，希望通过这次二叉树的专项练习，可以入个门吧~~~：）</p><hr><h3 id="1-二叉树展开为链表"><a href="#1-二叉树展开为链表" class="headerlink" title="1.二叉树展开为链表"></a>1.二叉树展开为链表</h3><ul><li>描述：把一棵二叉树展开为一条链表，链表的顺序就是二叉树的先序遍历顺序，链表实际上就是特殊的二叉树</li><li>总体说明：<ul><li>在原先基础上建立链表<ul><li>迭代，划分为三大模块再处理里面的内容（解法一）</li><li>先序遍历的逆过程，递归（解法二）</li><li>栈保存左右子树信息（解法三）</li></ul></li><li>新建链表（先序遍历保存下来，再形成链表）（解法四）<ul><li>递归或者的迭代的方式进行先序遍历依次保存节点</li></ul></li></ul></li></ul><h4 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：按照先序遍历的思路<strong>直接在二叉树上做修改（迭代）</strong>，先是根节点，然后是左子树，最后是右子树；迭代每个根节点，把右子树挂到左子树的最右子节点，然后把左子树移到右子树的位置，原先的左子树置空。</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flatten</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>       <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">if</span>(root.left == <span class="hljs-literal">null</span>)&#123;<br>               root = root.right;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> root.left;<br>               <span class="hljs-keyword">while</span>(tmp.right != <span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//遍历找到左子树的最右子节点</span><br>                   tmp = tmp.right;<br>               &#125;<br>               tmp.right = root.right;<br>               root.right = root.left;<br>               root.left = <span class="hljs-literal">null</span>;<br>               root = root.right;<br>           &#125;<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：根据先序遍历，<u>把根节点，左子树，右子树先作为三个part连成一个链表</u>，然后再依次<strong>迭代</strong>里面的内容</li></ul><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><ul><li><p>思路：先序遍历的逆过程。如果从根节点开始按照先序遍历的顺序<strong>直接</strong>建立链表，那么它的右节点就会还没有遍历到就直接被覆盖掉了。所以转换思维，从链尾开始倒着建立链表（root.right&#x3D;pre,root.left&#x3D;null）pre是链表上当前root的后一个节点，根据先右子树后左子树的<strong>递归</strong>，<strong>自底向上</strong>倒序连接形成链表。</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    TreeNode pre;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flatten</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        flatten(root.right);<br>        flatten(root.left);<br>        root.right = pre;<br>        root.left = <span class="hljs-literal">null</span>; <br>        pre = root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：很棒的想法，通过递归实现的顺序是<u><strong>右子树，左子树，根节点</strong></u>，刚好是先序遍历（根节点，左子树，右子树）的逆序，再逐步组织链表。</li></ul><h4 id="解法三："><a href="#解法三：" class="headerlink" title="解法三："></a>解法三：</h4><ul><li><p>思路：之前提到直接按照先序遍历建立链表会覆盖掉原先的右子树，那么可以通过<strong>栈的方式保存子树信息</strong>，先存右子树，再存左子树，申明一个前置节点，刚开始是root,从栈中先取出来的是左子树的根节点，pre.right &#x3D; cur; pre.left &#x3D; null;然后更新pre即可。最终实现<strong>自顶向下</strong>建立链表。</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flatten</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        Deque&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        stack.push(root);<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> stack.pop();<br>            <span class="hljs-keyword">if</span>(pre != <span class="hljs-literal">null</span>)&#123;<br>                pre.right = cur;<br>                pre.left = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur.right != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(cur.right);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur.left != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(cur.left);<br>            &#125;<br>            pre = cur;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：递归迭代这些好像经常可以和栈联系起来，栈的作用主要是<strong>保存状态</strong>，使得程序的遍历可以更加符合**<u>顺序逻辑</u>**。</li></ul><h4 id="解法四："><a href="#解法四：" class="headerlink" title="解法四："></a>解法四：</h4><ul><li>思路：以上的方法都是直接在二叉树上修改，使之变成链表，实际上也可以直接申明一个List<Treenode> 类型的list,先序遍历二叉树，把节点按顺序放入list，最后连接起一个链表即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flatten</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        preorderTraversal(root, list);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size()-<span class="hljs-number">1</span>; i++)&#123; <span class="hljs-comment">//List类型转为单向链表</span><br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> list.get(i), next = list.get(i + <span class="hljs-number">1</span>);<br>            cur.right = next;<br>            cur.left = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root, List&lt;TreeNode&gt; list)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root != <span class="hljs-literal">null</span>)&#123;<br>            list.add(root);<br>            preorderTraversal(root.left, list);<br>            preorderTraversal(root.right, list);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：对于这种简单的递归要尽可能地熟练，并不难。</li></ul><h3 id="2-将有序数组转换为二叉搜索树"><a href="#2-将有序数组转换为二叉搜索树" class="headerlink" title="2.将有序数组转换为二叉搜索树"></a>2.将有序数组转换为二叉搜索树</h3><ul><li>描述：给定一个升序数组，将其转化为一个高度平衡的二叉搜索树，即中序遍历是个升序数组</li></ul><h4 id="解法一：-1"><a href="#解法一：-1" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：高度平衡，考虑把中间位置作为根节点进行建树，再递归调用建立左右子树即可。</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">sortedArrayToBST</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">return</span> helper(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">helper</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br>        <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[mid]);<br>        root.left = helper(nums, left, mid -<span class="hljs-number">1</span>);<br>        root.right = helper(nums, mid + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：数组转化为二叉树思路并不难，只是对树的建立过程不够熟悉。因为涉及递归，最好新建一个函数。</li></ul><h3 id="3-二叉树的最近公共祖先"><a href="#3-二叉树的最近公共祖先" class="headerlink" title="3.二叉树的最近公共祖先"></a>3.二叉树的最近公共祖先</h3><ul><li>描述：给定一个二叉树, 找到该树中两个指定节点的最近公共祖先</li></ul><h4 id="解法一：-2"><a href="#解法一：-2" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：通过递归分别去左右子树寻找，一旦找到p或q，直接返回，或者两者分别在左右子树，返回当前的root</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span> || root == p || root == q) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.left, p, q);<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.right, p, q);<br>        <span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> right;<br>        <span class="hljs-keyword">if</span>(right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> left;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：很精彩的递归，尤其是return root 这里，空的会向上传，直到有一个left和right都恰好是非空。</li></ul><h4 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h4><ul><li><p>思路：先提前dfs整棵树，确定所有的父节点，然后找出p的父节点这条路，再找q的所有祖先，一旦之前找到过，就是最近的公共祖先。<strong>另外，题目说明所有 <code>Node.val</code> <code>互不相同</code> ，故可以Map存储节点的值。</strong></p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Integer, TreeNode&gt; parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    Set&lt;Integer&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root.left != <span class="hljs-literal">null</span>)&#123;<br>            parent.put(root.left.val, root);<br>            dfs(root.left);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.right != <span class="hljs-literal">null</span>)&#123;<br>            parent.put(root.right.val, root);<br>            dfs(root.right);<br>        &#125;<br><br>    &#125;<br><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>        dfs(root);<br>        <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">null</span>)&#123;<br>            visited.add(p.val);<br>            p = parent.get(p.val);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(q != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(visited.contains(q.val))&#123;<br>                <span class="hljs-keyword">return</span> q;<br>            &#125;<br>            q = parent.get(q.val);<br>       &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：这个代码相对递归更好理解，就是直观的解法，后面的p，q就不是这两个点了，而是它们所有直接祖先这条线上的点。</li></ul><h3 id="4-把二叉搜索树转化为累加树"><a href="#4-把二叉搜索树转化为累加树" class="headerlink" title="4.把二叉搜索树转化为累加树"></a>4.把二叉搜索树转化为累加树</h3><ul><li>描述：给定一个二叉搜索树，请将它的每个节点的值替换成树中大于或者等于该节点值的所有节点值之和。补充：二叉搜索树的中序遍历是一个升序数组。</li></ul><h4 id="解法一：-3"><a href="#解法一：-3" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：逆向思维，从二叉搜索树的最右子节点开始，以中序遍历的逆过程（<strong>右子树，根节点，左子树</strong>）遍历，其值就是当前遍历过的节点的不断累加。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">convertBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        convertBST(root.right);<br>        sum += root.val;<br>        root.val = sum;<br>        convertBST(root.left);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：增加了递归的熟练度，宏观来看就是<strong>右子树，根节点，左子树</strong>的顺序，具体的实现细节也要验证符合要求，很锻炼思维能力。</li></ul><h3 id="5-路径总和"><a href="#5-路径总和" class="headerlink" title="5.路径总和|||"></a>5.路径总和|||</h3><ul><li>描述：给定一个二叉树的根节点 <code>root</code> ，和一个整数 <code>targetSum</code> ，求该二叉树里节点值之和等于 <code>targetSum</code> 的 路径 的数目。路径 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</li></ul><h4 id="解法一：-4"><a href="#解法一：-4" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：路径是从父节点到根节点，那么可以深度搜索遍历整棵树，同时维护一个前缀和的哈希数组，键是当前节点之前出现过的前缀和，值出现的次数，cur代表从根节点到达当前节点的所有的和。</li><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        Map&lt;Long, Integer&gt; prefix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        prefix.put(<span class="hljs-number">0L</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> dfs(root, prefix, <span class="hljs-number">0</span>, targetSum);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, Map&lt;Long, Integer&gt; prefix, <span class="hljs-type">long</span> cur, <span class="hljs-type">int</span> targetSum&#123;</span><br><span class="hljs-params">        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//ret每次进来重新赋值，但由于下面的+=,最后会累加成最终的结果</span><br>        cur += root.val;<br>        ret = prefix.getOrDefault(cur - targetSum,<span class="hljs-number">0</span>);<br>        prefix.put(cur, prefix.getOrDefault(cur, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        ret += dfs(root.left, prefix, cur, targetSum);<br>        ret += dfs(root.right, prefix, cur, targetSum);<br>        prefix.put(cur,prefix.getOrDefault(cur, <span class="hljs-number">0</span>) - <span class="hljs-number">1</span>); <span class="hljs-comment">//跳转到另一颗子树，必须恢复现场</span><br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：二叉树还是跟递归关系很大，主要是利用了前缀和的思想和Map这一键值对的数据结构，还有就是当当前节点遍历完，换到另一颗子树时一定要恢复现场，才能保证prefix的准确性。</li></ul><h3 id="6-二叉搜索树中第K小的元素"><a href="#6-二叉搜索树中第K小的元素" class="headerlink" title="6.二叉搜索树中第K小的元素"></a>6.二叉搜索树中第K小的元素</h3><ul><li>描述：给定一个二叉搜索树的根节点 <code>root</code> ，和一个整数 <code>k</code> ，请你设计一个算法查找其中第 <code>k</code> 个最小元素（从 1 开始计数）。</li></ul><h4 id="解法一：-5"><a href="#解法一：-5" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：二叉搜索树的特点是中序遍历是一个升序数组，那么直接进行中序遍历，保存到数组里，取第k个元素的值即可，是自己写出来的一道题呦~o(<em>￣▽￣</em>)ブ</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>        List&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        middleOrderTravesal(root,list);<br>        <span class="hljs-keyword">return</span> list.get(k-<span class="hljs-number">1</span>).val;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">middleOrderTravesal</span><span class="hljs-params">(TreeNode root, List&lt;TreeNode&gt; list)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        middleOrderTravesal(root.left, list);<br>        list.add(root);<br>        middleOrderTravesal(root.right, list);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：二叉树果然还是和递归或者遍历分不开，做多了就渐渐有感觉了。</li></ul><h3 id="7-二叉树的右视图"><a href="#7-二叉树的右视图" class="headerlink" title="7.二叉树的右视图"></a>7.二叉树的右视图</h3><ul><li>描述：给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</li></ul><h4 id="解法一：-6"><a href="#解法一：-6" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：先右子树后左子树地递归，维护一个深度变量，如果是第一次到达该层就添加进答案，这样就满足右视图的要求了。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">dep</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">rightSideView</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; right_view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> right_view;<br>        dfs(root, right_view, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> right_view;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; right_view, <span class="hljs-type">int</span> depth)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        depth++;<br>        <span class="hljs-keyword">if</span>(depth &gt; dep)&#123;<br>            right_view.add(root.val);<br>            dep = depth;<br>        &#125;<br>        dfs(root.right, right_view, depth);<br>        dfs(root.left, right_view ,depth);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：刚开始没有想到有可能右子树不存在，看到的是左子树的节点。所以需要维护一个深度，这部分有点思路但不太会实现，实际上就是通过一个全局变量来找到该层出现的第一个节点。</li></ul><h3 id="8-二叉树中的最大路径和"><a href="#8-二叉树中的最大路径和" class="headerlink" title="8.二叉树中的最大路径和"></a>8.二叉树中的最大路径和</h3><ul><li>描述：二叉树中的 <strong>路径</strong> 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。<strong>路径和</strong> 是路径中各节点值的总和。给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</li></ul><h4 id="解法一：-7"><a href="#解法一：-7" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：首先，这是个可递归的问题，对于每个节点，可以<strong>递归</strong>找到<strong>以它为根节点的且向下的路径和的最大值</strong>，那么对于整体的二叉树的最大路径和，可以在递归过程中，不断比较<strong>节点的值加上其左右子节点的最大路径和</strong>，最终找到最大路径和。由于存在负数，要和0比较一下。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxSum</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxPathSum</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        maxGain(root);<br>        <span class="hljs-keyword">return</span> maxSum;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxGain</span><span class="hljs-params">(TreeNode node)</span>&#123;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftGain</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">0</span>, maxGain(node.left));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightGain</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">0</span>,maxGain(node.right));<br>        maxSum = Math.max(maxSum, node.val + leftGain + rightGain); <span class="hljs-comment">//递归完后就可以把该节点作为候选节点</span><br>        <span class="hljs-keyword">return</span> node.val + Math.max(leftGain, rightGain);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：感觉以前好像做过，但是对于递归的熟悉还是不够，相当于把最终的路径按最上面的节点进行拆分为三个部分（当前节点，左子树的一条最大路径，右子树的一条最大路径），那么问题就转变为递归每个节点的最大贡献值。通过<strong>拆分</strong>把复杂问题简单化。</li></ul><h3 id="9、二叉树的直径"><a href="#9、二叉树的直径" class="headerlink" title="9、二叉树的直径"></a>9、二叉树的直径</h3><ul><li>描述：给你一棵二叉树的根节点，返回该树的 <strong>直径</strong> 。二叉树的 <strong>直径</strong> 是指树中任意两个节点之间最长路径的 <strong>长度</strong> 。这条路径可能经过也可能不经过根节点 <code>root</code> 。两节点之间路径的 <strong>长度</strong> 由它们之间边数表示。</li></ul><h4 id="解法一：-8"><a href="#解法一：-8" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：直径可以不通过根节点，即答案的最高点可以不是根节点，那么ans就需要在这个过程中不断比较产生。递归得到以当前节点为根的左右两边的最大长度，尝试更新ans，并选取较大的一个返回给上层，这一点跟题目8很像。</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">diameterOfBinaryTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        dfs(root);<br>        <span class="hljs-keyword">return</span> ans - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> dfs(root.left) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> dfs(root.right) + <span class="hljs-number">1</span>;<br>        ans = Math.max(ans, left + right -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> Math.max(left, right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：慢慢自己调出了ac代码，这个过程还是很重要的，对于一些细碎的分类会更加清楚，比如需不需要全局变量，dfs需不需要返回值，+1-1这些判断，自己思考后会很清晰。</li></ul><h3 id="10-验证二叉搜索树"><a href="#10-验证二叉搜索树" class="headerlink" title="10.验证二叉搜索树"></a>10.验证二叉搜索树</h3><ul><li><p>描述：给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p><p><strong>有效</strong> 二叉搜索树定义如下：</p><ul><li>节点的左子树只包含 <strong>小于</strong> 当前节点的数。</li><li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul></li></ul><h4 id="解法一：-9"><a href="#解法一：-9" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：刚开始暴力的想法就是按照中序遍历的方式保存所有节点信息，再判断是否是一个升序数组，实际上可以直接在递归的过程中逐步地判断，对于当前的每个节点都有上一层传下来的上下界，不符合条件即可返回false。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">long</span> lower, <span class="hljs-type">long</span> upper)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(root.val &lt;= lower || root.val &gt;= upper) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> isValidBST(root.left, lower, root.val) &amp;&amp; <br>        isValidBST(root.right, root.val, upper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：这个题目的递归顺序没有特别大的要求，主要是传参递归，并且参数是在不断修改的。另外，树上的递归一般都需要一个最先的if判断终止条件，以防递归的无限衍生。</li></ul><h3 id="11-二叉树的层序遍历"><a href="#11-二叉树的层序遍历" class="headerlink" title="11.二叉树的层序遍历"></a>11.二叉树的层序遍历</h3><ul><li>描述：给你二叉树的根节点 <code>root</code> ，返回其节点值的<strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</li></ul><h4 id="解法一：-10"><a href="#解法一：-10" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：按照题目按层取出节点值，想到<strong>广度优先搜索</strong>天然符合，通过队列来实现，先考虑左节点再考虑右节点，那么取出来就是每层的从左到右。</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> ret;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        queue.offer(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            List&lt;Integer&gt; level = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">curLevelSize</span> <span class="hljs-operator">=</span> queue.size();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= curLevelSize; i++)&#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>                level.add(node.val);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.offer(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.offer(node.right);<br>            &#125; <br>            ret.add(level);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：对于广度优先搜索太久没写了，主要就是用队列，刚开始放一个初始节点，然后非空判断，取出节点又再放入新的节点，并不难。</li></ul><h3 id="12-对称二叉树"><a href="#12-对称二叉树" class="headerlink" title="12.对称二叉树"></a>12.对称二叉树</h3><ul><li>描述：给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</li></ul><h4 id="解法一：-11"><a href="#解法一：-11" class="headerlink" title="解法一："></a>解法一：</h4><ul><li><p>思路：可以采用<strong>迭代</strong>，利用队列来实现，不断地更新当前的u,v</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> check(root, root);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(TreeNode u, TreeNode v)</span>&#123;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        queue.offer(u);<br>        queue.offer(v);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>           u = queue.poll();<br>           v = queue.poll();<br>           <span class="hljs-keyword">if</span>(u == <span class="hljs-literal">null</span> &amp;&amp; v == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br>           <span class="hljs-keyword">if</span>(u == <span class="hljs-literal">null</span> || v == <span class="hljs-literal">null</span> || u.val != v.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           queue.offer(u.left);<br>           queue.offer(v.right);<br>           queue.offer(u.right);<br>           queue.offer(v.left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：好像用到队列的写法都比较类似，只不过这道题没有涉及广搜的思想，主要就是实现一个迭代，和深搜的递归可以相互转化。</li></ul><h4 id="解法二：-1"><a href="#解法二：-1" class="headerlink" title="解法二："></a>解法二：</h4><ul><li>思路：采取递归的方式，不断往下迭代。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> dfs(root, root);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode u, TreeNode v)</span>&#123;<br>        <span class="hljs-keyword">if</span>(u == <span class="hljs-literal">null</span> &amp;&amp; v == <span class="hljs-literal">null</span> ) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(u == <span class="hljs-literal">null</span> || v == <span class="hljs-literal">null</span> || u.val != v.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> dfs(u.left, v.right) &amp;&amp; dfs(u.right, v.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：很精妙的递归题目，简单的代码即可实现。</li></ul><h3 id="13-翻转二叉树"><a href="#13-翻转二叉树" class="headerlink" title="13.翻转二叉树"></a>13.翻转二叉树</h3><ul><li>描述：给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</li></ul><h4 id="解法一：-12"><a href="#解法一：-12" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：通过经典的三点交换两个对象的值，然后递归向下逐层进行翻转。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> root.left;<br>        root.left = root.right;<br>        root.right = tmp;<br>        invertTree(root.left);<br>        invertTree(root.right);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：特别的点在于方法虽然有返回值，但是在递归调用时不需要返回值，根据题意就是返回根节点即可，而根节点是不变的，最后原样返回即可。</li></ul><h3 id="14-从前序与中序遍历序列构造二叉树"><a href="#14-从前序与中序遍历序列构造二叉树" class="headerlink" title="14.从前序与中序遍历序列构造二叉树"></a>14.从前序与中序遍历序列构造二叉树</h3><ul><li>描述：给定两个整数数组 <code>preorder</code> 和 <code>inorder</code> ，其中 <code>preorder</code> 是二叉树的<strong>先序遍历</strong>， <code>inorder</code> 是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</li></ul><h4 id="解法一：-13"><a href="#解法一：-13" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：前序与中序遍历相结合，通过前序遍历找到根节点，再通过该根节点在中序遍历中找到左子树的大小，进而回到前序遍历找到新的根，不断向下递归实现整棵二叉树的构造。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;Integer, Integer&gt; indexMap;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">myBuildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder, <span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span> pl, <span class="hljs-type">int</span> pr, <span class="hljs-type">int</span> il, <span class="hljs-type">int</span> ir)</span>&#123;<br>        <span class="hljs-keyword">if</span>(pl &gt; pr) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p_root</span> <span class="hljs-operator">=</span> pl;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i_root</span> <span class="hljs-operator">=</span> indexMap.get(preorder[p_root]);<br><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(preorder[p_root]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size_left_subtree</span> <span class="hljs-operator">=</span> i_root - il;<br>        root.left = myBuildTree(preorder, inorder, pl + <span class="hljs-number">1</span>, pl + size_left_subtree, il, ir -<span class="hljs-number">1</span>);<br>        root.right = myBuildTree(preorder, inorder, pl + size_left_subtree + <span class="hljs-number">1</span>, pr, i_root + <span class="hljs-number">1</span>, ir);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder, <span class="hljs-type">int</span>[] inorder)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> preorder.length;<br>        indexMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer,Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            indexMap.put(inorder[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> myBuildTree(preorder, inorder, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：找到其中可递归的部分，两个数组交相更新，很巧妙的一个出题思路。同时，利用了<strong>Map</strong>数据结构，快速找到其中的值的坐标。</li></ul><h3 id="15-打家劫舍"><a href="#15-打家劫舍" class="headerlink" title="15.打家劫舍|||"></a>15.打家劫舍|||</h3><ul><li><p>描述：小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为 <code>root</code> 。</p><p>除了 <code>root</code> 之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果 <strong>两个直接相连的房子在同一天晚上被打劫</strong> ，房屋将自动报警。</p><p>给定二叉树的 <code>root</code> 。返回 <strong>在不触动警报的情况下</strong> ，小偷能够盗取的最高金额 。</p></li></ul><h4 id="解法一：-14"><a href="#解法一：-14" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：是一个<strong>树形DP</strong>问题，每个节点有选（f）或不选(g)两种选择，自底向上看的话，f(node) &#x3D; node.val+g(node.left)+g(node.right),g(node)&#x3D;max(g(node.left),f(node.left))+max(g(node.right),f(node.right))。先递归再处理值的转移，就形成<strong>自底向上的推导</strong>。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;TreeNode, Integer&gt; f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    Map&lt;TreeNode, Integer&gt; g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        dfs(root);<br>        <span class="hljs-keyword">return</span> Math.max(f.getOrDefault(root,<span class="hljs-number">0</span>), g.getOrDefault(root,<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node)</span>&#123;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        dfs(node.left);<br>        dfs(node.right);<br>        f.put(node,node.val + g.getOrDefault(node.left,<span class="hljs-number">0</span>) + g.getOrDefault(node.right,<span class="hljs-number">0</span>));<br>        g.put(node, Math.max(f.getOrDefault(node.left, <span class="hljs-number">0</span>),g.getOrDefault(node.left, <span class="hljs-number">0</span>))<br>        +Math.max(f.getOrDefault(node.right, <span class="hljs-number">0</span>),g.getOrDefault(node.right, <span class="hljs-number">0</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：第一眼都没看出来是动态规划。其实是个比较常见的自底向上的套路，推导公式也比较正常，结合Map实现，多多练习吧。</li></ul><h4 id="解法二：-2"><a href="#解法二：-2" class="headerlink" title="解法二："></a>解法二：</h4><ul><li>思路：解法一的代码可以发现f,g和总是依赖上一层的结果，没必要记录所有的过程，可以对此进行优化，利用数组记录每次的结果即可。</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">int</span>[] rootStatus = dfs(root);<br>        <span class="hljs-keyword">return</span> Math.max(rootStatus[<span class="hljs-number">0</span>], rootStatus[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] dfs(TreeNode node)&#123;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        &#125;<br>        <span class="hljs-type">int</span>[] l = dfs(node.left);<br>        <span class="hljs-type">int</span>[] r = dfs(node.right);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">select</span> <span class="hljs-operator">=</span> node.val + l[<span class="hljs-number">1</span>] + r[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">noSelect</span> <span class="hljs-operator">=</span> Math.max(l[<span class="hljs-number">0</span>], l[<span class="hljs-number">1</span>]) + Math.max(r[<span class="hljs-number">0</span>], r[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;select, noSelect&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结:利用数组的两个元素进行优化，代码原理基本一致，dfs有了返回值，相同的思路不一样的写法，That‘s cool.</li></ul><h3 id="16-二叉树的中序遍历"><a href="#16-二叉树的中序遍历" class="headerlink" title="16.二叉树的中序遍历"></a>16.二叉树的中序遍历</h3><ul><li>描述：给定一个二叉树的根节点 <code>root</code> ，返回 <em>它的 <strong>中序</strong> 遍历</em> 。</li></ul><h4 id="解法一：-15"><a href="#解法一：-15" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：中序遍历即按照<strong>左子树、根节点、右子树</strong>的顺序<strong>递归</strong>遍历整棵二叉树</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        dfs(root);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        dfs(root.left);<br>        res.add(root.val);<br>        dfs(root.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：分析dfs特点，选择设定一个全局变量，dfs不需要返回值。自己敲出来了，算是对树的递归入了门啦。当然，也可以把res作为一个参数传入到dfs中，是一样的效果。</li></ul><h4 id="解法二：-3"><a href="#解法二：-3" class="headerlink" title="解法二："></a>解法二：</h4><ul><li>思路：使用<strong>迭代</strong>的思维，维护一个<strong>栈</strong>，先后加入左子树，直到不能加入为止，再加入根节点，再加入右子树，回到之前的步骤</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Deque&lt;TreeNode&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">null</span> || !stk.isEmpty())&#123;<br>            <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">null</span>)&#123;<br>                stk.push(root);<br>                root = root.left;<br>            &#125;<br>            root = stk.pop();<br>            res.add(root.val);<br>            root = root.right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：递归和迭代在很多时候可以相互转换，相对来说，对迭代更加不熟悉，需要多加练习。大部分是结合栈来实现，如第1题，但第12题对称二叉树采用了队列实现。</li></ul><h3 id="17-二叉树的最大深度"><a href="#17-二叉树的最大深度" class="headerlink" title="17.二叉树的最大深度"></a>17.二叉树的最大深度</h3><ul><li>描述：给定一个二叉树 <code>root</code> ，返回其最大深度。二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</li></ul><h4 id="解法一：-16"><a href="#解法一：-16" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：很递归的一道题目，左右子树的最大深度又可以决定当前的最大深度</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> maxDepth(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> maxDepth(root.right);<br>        <span class="hljs-keyword">return</span> Math.max(l,r) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：递归很清晰的一道题目，算是很多题目的源头叭~</li></ul><h3 id="18-二叉树的序列化和反序列化"><a href="#18-二叉树的序列化和反序列化" class="headerlink" title="18.二叉树的序列化和反序列化"></a>18.二叉树的序列化和反序列化</h3><ul><li><p>描述：序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 &#x2F; 反序列化算法执行逻辑，只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p></li></ul><h4 id="解法一：-17"><a href="#解法一：-17" class="headerlink" title="解法一："></a>解法一：</h4><ul><li>思路：可以按照先序遍历取出二叉树上的值，空节点用None代替，然后再把List类型递归按先序遍历生成二叉树</li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Codec</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> rserialize(root, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String data)</span> &#123;<br>        String[] dataArray = data.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        List&lt;String&gt; dataList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;(Arrays.asList(dataArray));<br>        <span class="hljs-keyword">return</span> rdeserialize(dataList);   <br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rserialize</span><span class="hljs-params">(TreeNode root, String str)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<br>            str += <span class="hljs-string">&quot;None,&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            str += str.valueOf(root.val) + <span class="hljs-string">&quot;,&quot;</span>;<br>            str = rserialize(root.left, str);<br>            str = rserialize(root.right, str);<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">rdeserialize</span><span class="hljs-params">(List&lt;String&gt; dataList)</span>&#123;<br>        <span class="hljs-keyword">if</span>(dataList.get(<span class="hljs-number">0</span>).equals(<span class="hljs-string">&quot;None&quot;</span>))&#123;<br>            dataList.remove(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(Integer.valueOf(dataList.get(<span class="hljs-number">0</span>)));<br>        dataList.remove(<span class="hljs-number">0</span>);<br>        root.left = rdeserialize(dataList);<br>        root.right = rdeserialize(dataList);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>总结：相当于两个简单题的组合，读取二叉树和将有序数组转化为二叉树，还有一些字符串的应用，比如valueOf,split方法</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>课设复盘</title>
    <link href="/2024/01/19/%E8%AF%BE%E8%AE%BE%E5%A4%8D%E7%9B%98/"/>
    <url>/2024/01/19/%E8%AF%BE%E8%AE%BE%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="大三上两次课程设计复盘"><a href="#大三上两次课程设计复盘" class="headerlink" title="大三上两次课程设计复盘"></a>大三上两次课程设计复盘</h1><h4 id="1-数据库管理系统课设"><a href="#1-数据库管理系统课设" class="headerlink" title="1.数据库管理系统课设"></a>1.数据库管理系统课设</h4><ul><li><strong>Situation：</strong> 情景。 事情是在什么情况下发生的？<ul><li>6个人的小组，需要完成一个数据库管理系统，包括文件结构存储，实现DDL,DML语句。</li></ul></li><li><strong>Task：</strong> 任务。你的任务是什么？<ul><li>担任组长</li><li>挑选合适的项目作为开发基础</li><li>对任务进行分工，包括从开发任务到汇报文档</li></ul></li><li><strong>Action：</strong> 行动。你做了什么？<ul><li>刚开始选择MYDB作为项目基础，但是其实现更偏原理性，可用性不强，且理解难度高，故舍弃</li><li>理解现有项目的实现，和组员讨论在此基础上要扩充的内容</li><li>合理分配任务，自己选择最难的select语句实现</li><li>帮助组员解决技术卡克点</li><li>制作ppt,向老师进行汇报答辩</li></ul></li><li><strong>Result：</strong> 结果。最终的结果怎样？<ul><li>既定的任务实现了90%，没有实现的是预先没有直接分配的那个任务</li><li>实现了前端界面和所有基本语句的支持，项目比较完整</li><li>答辩汇报也比较顺利，问答环节每个人回答到位</li></ul></li><li><strong>收获：</strong><ul><li>此次的专业技能提升主要在于编写select语句上，大力出奇迹的感觉，第一次真正用编码解决实际问题，虽然其实现性较为有限</li><li>软实力提升了不少，包括和组员共同能力，对整个项目进度的掌控能力，以及最后汇报的表达能力，均得到了提升</li></ul></li></ul><h4 id="2-软件文档-人脸识别Android-app课设"><a href="#2-软件文档-人脸识别Android-app课设" class="headerlink" title="2.软件文档-人脸识别Android app课设"></a>2.软件文档-人脸识别Android app课设</h4><ul><li><strong>Situation：</strong> 情景。 事情是在什么情况下发生的？<ul><li>需要开发一个系统实现人脸识别考勤签到，教师学生信息管理以及权限管理系统</li></ul></li><li><strong>Task：</strong> 任务。你的任务是什么？<ul><li>协助组长，帮助其推进项目</li></ul></li><li><strong>Action：</strong> 行动。你做了什么？<ul><li>最开始选择基础项目，敲定使用一个功能比较全的app项目</li><li>最近项目环境配置，一直不成功，在网上联系技术专家解决</li><li>最后项目部署上线，协助组长</li><li>一些文档编写，包括ER图的绘制</li></ul></li><li><strong>Result：</strong> 结果。最终的结果怎样？<ul><li>是唯一一个把app做出来的小组 ，其他都是网页版的实现，实现部分拿到了满分</li></ul></li><li><strong>收获：</strong><ul><li>专业技术：ER图建模，对关系型数据库建模的逻辑性有了更深的理解；Android项目的基本认识；项目部署上线流程有了大致的了解。</li><li>软能力：<ul><li>对一个更大项目的整体实现的认识，从各种文档的编写，前期需求分析，到ER图建模，项目选型，技术实现，部署上线，有了一个更加直观的体验；</li><li>学习到一些组织一个8人小组的经验</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学校项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/01/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/01/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p> 这是一篇测试文章：</p><img src="/2024/01/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="图片引用方法一">]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
